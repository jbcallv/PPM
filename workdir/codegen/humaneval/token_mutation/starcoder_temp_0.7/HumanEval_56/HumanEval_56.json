{"name": "HumanEval_56_correct_bracketing", "language": "py", "prompt": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" 0 is a string of \"<\" and \">\".\n    return \" if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n", "completions": ["    # Your code here\n    stack = []\n    for i in brackets:\n        if i == '<':\n            stack.append(i)\n        elif i == '>':\n            if stack == []:\n                return False\n            stack.pop()\n    return True\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}