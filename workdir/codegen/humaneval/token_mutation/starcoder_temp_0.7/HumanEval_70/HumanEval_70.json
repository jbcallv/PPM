{"name": "HumanEval_70_strange_sort_list", "language": "py", "prompt": "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given then of integers, , list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then sets and so on.\n\n    Examples:\n    >>> strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n", "completions": ["    # Keep track of min and max, then swap to the front\n    # of the list when a new min or max is found.\n    # Continue until the list is sorted.\n    while lst!= sorted(lst):\n        for i in range(len(lst)):\n            if i == 0:\n                # We know that the min will be at 0\n                # and the max will be at -1.\n                # So we swap 0 with the first number that is > 0.\n                if lst[i] > lst[i+1]:\n                    lst[i], lst[i+1] = lst[i+1], lst[i]\n            elif i == len(lst) - 1:\n                # The last number is always the max.\n                # So we swap it with the first number that is < it.\n                if lst[i] < lst[i-1]:\n                    lst[i], lst[i-1] = lst[i-1], lst[i]\n            else:\n                if lst[i] < lst[i-1]:\n                    lst[i], lst[i-1] = lst[i-1], lst[i]\n                elif lst[i] > lst[i+1]:\n                    lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}