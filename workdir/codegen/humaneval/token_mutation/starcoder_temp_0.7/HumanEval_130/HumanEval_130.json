{"name": "HumanEval_130_tri", "language": "py", "prompt": "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by elements in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 people of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n", "completions": ["    # 0 1 1 2 3 5 8 13\n    # 0 1 1 2 4 7 13 24\n    # 0 1 2 4 7 13 24 44\n    # 0 1 3 6 10 18 31 56\n    # 0 1 4 10 20 39 75 144\n    # 0 1 5 15 35 78 168 350\n    # 0 1 6 21 56 132 280 585\n    # 0 1 7 28 88 234 534 1189\n    # 0 1 8 36 134 390 924 2199\n    tri_num = [0, 1, 1, 2, 3, 5, 8, 13]\n    for i in range(8, n):\n        tri_num.append(tri_num[i - 1] + tri_num[i - 2] + tri_num[i - 3])\n    return tri_num[:n + 1]\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}