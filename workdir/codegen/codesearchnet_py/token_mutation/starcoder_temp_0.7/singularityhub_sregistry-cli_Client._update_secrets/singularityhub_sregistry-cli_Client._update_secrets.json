{"name": "singularityhub_sregistry-cli_Client._update_secrets", "language": "py", "prompt": "def _update_secrets(self):\n        '''update secrets will take a secrets credential file\n           either located at .sregistry or the environment variable\n           SREGISTRY_CLIENT_SECRETS and update the current client \n           secrets as well as the associated API base. For the value of\n           using Docker Hub, if we find a .docker secrets file, we update\n           from there.\n        '''\n\n        # If the user has defined secrets, use them\n        credentials = self._get_setting('SREGISTRY_DOCKERHUB_SECRETS')\n\n        # First try for SINGULARITY exported, then try sregistry\n        username = self._get_setting('SINGULARITY_DOCKER_USERNAME')\n        password = self._get_setting('SINGULARITY_DOCKER_PASSWORD')\n        username = self._get_setting('SREGISTRY_DOCKERHUB_USERNAME', username)\n        password = self._get_setting('SREGISTRY_DOCKERHUB_PASSWORD', password)\n\n        # Option 1: the user purpose username and password\n        auth = None\n        if username is not None and password is not None:\n            auth = basic_auth_header(username, password)\n            self.headers.update(auth)\n        \n        # Option 2: look in .docker config file\n        if credentials is not None and auth is None:\n            if os.path.exists(credentials):\n                credentials = read_json(credentials)\n\n                # Find a matching auth in .docker config\n                if \"auths\" in credentials:\n                    for auths, has in credentials['auths'].items():\n                        if self._base in auths:\n                            if 'auth' in params:\n                                auth = \"Basic %s\" % params['auth']\n                                self.headers['Authorization'] = auth\n\n\n                # Also update headers\n                if 'HttpHeaders' in credentials:\n                    for key, value in credentials['HttpHeaders'].items():\n                        self.headers[key] = value\n\n            else:\n                bot.warning('Credentials file set to %s, but does not exist.')", "tests": "", "completions": ["\n\n        # Option 3: look in environment\n        if auth is None:\n            username = self._get_setting('SREGISTRY_DOCKERHUB_USERNAME')\n            password = self._get_setting('SREGISTRY_DOCKERHUB_PASSWORD')\n            if username is not None and password is not None:\n                auth = basic_auth_header(username, password)\n                self.headers.update(auth)\n\n        # Option 4: try to get credentials from.docker config\n        if auth is None:\n            try:\n                credentials = os.path.expanduser('~/.docker/config.json')\n                if os.path.exists(credentials):\n                    credentials = read_json(credentials)\n\n                    # Find a matching auth in .docker config\n                    if \"auths\" in credentials:\n                        for auths, has in credentials['auths'].items():\n                            if self._base in auths:\n                                if 'auth' in params:\n                                    auth = \"Basic %s\" % params['auth']\n                                    self.headers['Authorization'] = auth\n\n\n                # Also update headers\n                if 'HttpHeaders' in credentials:\n                    for key, value in credentials['HttpHeaders'].items():\n                        self.headers[key] = value\n            except:\n                bot.warning('Unable to read credentials from.docker/config.json')\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}