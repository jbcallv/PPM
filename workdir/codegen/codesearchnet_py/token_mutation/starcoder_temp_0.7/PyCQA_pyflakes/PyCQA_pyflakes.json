{"name": "PyCQA_pyflakes_Checker.checkDeadScopes", "language": "py", "prompt": "def checkDeadScopes(self):\n        \"\"\"\n        those at look which have been fully examined and report those in them\n        which were imported but unused.\n        \"\"\"", "tests": "", "completions": ["\n        for scope in self.scopes.values():\n            if scope.dead:\n                self.deadScopes.append(scope)\n\n    def _checkUnusedImports(self):\n        \"\"\"\n        Check for any unused imports.\n\n        This checks for any imports that are not used, as well as any\n        imports of unused modules.\n        \"\"\"\n        # usedModules is a set of modules imported, whether or not they are\n        # actually used.\n        usedModules = set()\n\n        # usedImports is a set of imports that are used.  If we find that an\n        # import is used, we remove it from this set.  If there are no\n        # imports left in this set at the end of the check, we're done.\n        usedImports = set()\n\n        for scope in self.scopes.values():\n            if scope.imports:\n                for imp in scope.imports:\n                    usedModules.add(imp.module)\n                    if imp.name not in scope.used:\n                        self.unusedImports.append((imp, scope))\n                    else:\n                        usedImports.add(imp)\n\n        for scope in self.scopes.values():\n            if scope.imports:\n                for imp in scope.imports:\n                    if imp not in usedImports:\n                        self.unusedImports.append((imp, scope))\n\n        # Now see if any of the modules we imported are unused.\n        for module, importList in self.importedModules.items():\n            if module not in usedModules and module not in self.hiddenImports:\n                # If this is a wildcard import, we don't really care.\n                if any([x[0] == \"*\" for x in importList]):\n                    continue\n                for imp, scope in self.unusedImports:\n                    if imp.module == module:\n                        self.unusedImports.append((imp, scope))\n                        break\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}