{"name": "odlgroup_odl_MatrixWeighting.matrix_decomp", "language": "py", "prompt": "def matrix_decomp(self, cache=None):\n        \"\"\"Compute a Hermitian eigenbasis decomposition of the matrix.\n\n        Parameters\n        ----------\n        cache : bool or None, optional\n            If ``True``, store the decomposition internally. For None,\n            the ``cache_mat_decomp`` from class initialization is used.\n\n        Returns\n        -------\n        eigval : `numpy.ndarray`\n            One-dimensional set of eigenvalues. Its length is equal\n            to the number of matrix rows.\n        eigvec : `numpy.ndarray`\n            Two-dimensional set of eigenvectors. It has the same shape\n            as the decomposed matrix.\n\n        See Also\n        --------\n        scipy.linalg.decomp.eigh :\n            Implementation of the decomposition. Standard parameters\n            are used here.\n\n        Raises\n        ------\n        NotImplementedError\n            if the matrix is empty (not supported by scipy 0.17)\n        \"\"\"", "tests": "", "completions": ["\n        if cache is None:\n            cache = self.cache_mat_decomp\n        if cache and self._decomp_cached:\n            return self._decomp_cached\n        if self.shape[0] == 0:\n            raise NotImplementedError('Empty matrices not supported by scipy 0.17')\n        self._decomp_cached = eigh(self)\n        return self._decomp_cached\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}