{"name": "arne-cl_discoursegraphs_create_token_mapping", "language": "py", "prompt": "def create_token_mapping(docgraph_with_old_names, docgraph_with_new_names,\n                         verbose=False):\n    \"\"\"\n    given two document graphs which annotate the same text and which use the\n    same tokenization, creates a dictionary with a mapping from the token\n    IDs used in the first graph to the token IDs used in the second graph.\n\n    Parameters\n    ----------\n    docgraph_with_old_names : DiscourseDocumentGraph\n        a document graph with token IDs that will be replaced later on\n    docgraph_with_new_names : DiscourseDocumentGraph\n        a document graph with token IDs that will replace the token IDs\n        used in ``docgraph_with_old_names`` later on\n\n    Returns\n    -------\n    old2new : dict\n        maps from a token ID used in ``docgraph_with_old_names`` to the token\n        ID used in ``docgraph_with_new_names`` to reference the same token\n    \"\"\"", "tests": "", "completions": ["\n    old2new = {}\n    for old_token_id, new_token_id in zip(\n            docgraph_with_old_names.get_tokens(),\n            docgraph_with_new_names.get_tokens()):\n        old2new[old_token_id] = new_token_id\n    return old2new\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}