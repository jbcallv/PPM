{"name": "JdeRobot_base_MAVLink.highres_imu_send", "language": "py", "prompt": "def highres_imu_send(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated, force_mavlink1=False):\n                '''\n                The pressure readings in SI units in NED body frame\n\n                time_usec                 : Timestamp (microseconds, synced to UNIX time or since system boot) (uint64_t)\n                xacc                      : X acceleration (m/s^2) (float)\n                yacc                      : Y acceleration (m/s^2) (float)\n                zacc                      : Z acceleration (m/s^2) (float)\n                xgyro                     : Angular speed around X axis (rad / sec) (float)\n                ygyro                     : Angular speed around Y axis (rad / sec) (float)\n                zgyro                     : Angular speed around Z axis (rad / sec) (float)\n                xmag                      : X Magnetic field (Gauss) (float)\n                ymag                      : Y Magnetic field (Gauss) (float)\n                zmag                      : Z Magnetic field (Gauss) (float)\n                abs_pressure              : Absolute pressure in millibar (float)\n                diff_pressure             : Differential data in millibar (float)\n                pressure_alt              : Altitude calculated from pressure (float)\n                temperature               : Temperature in degrees celsius (float)\n                fields_updated            : Bitmask for fields that have updated since last message, bit 0 = xacc, bit 12: temperature (uint16_t)\n\n                '''\n                return self.send(self.highres_imu_encode(time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated), force_mavlink1=force_mavlink1)", "tests": "", "completions": ["\n\n            def attitude_quaternion_send(self, time_boot_ms, q1, q2, q3, q4, rollspeed, pitchspeed, yawspeed, rollacc, pitchacc, yawacc, force_mavlink1=False):\n                '''\n                \n\n                time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)\n                q1                        : Quaternion component 1, w (1 in null-rotation) (float)\n                q2                        : Quaternion component 2, x (0 in null-rotation) (float)\n                q3                        : Quaternion component 3, y (0 in null-rotation) (float)\n                q4                        : Quaternion component 4, z (0 in null-rotation) (float)\n                rollspeed                 : Roll angular speed (rad/s) (float)\n                pitchspeed                : Pitch angular speed (rad/s) (float)\n                yawspeed                  : Yaw angular speed (rad/s) (float)\n                rollacc                   : Roll angular speed (rad/s) (float)\n                pitchacc                  : Pitch angular speed (rad/s) (float)\n                yawacc                    : Yaw angular speed (rad/s) (float)\n\n                '''\n                return self.send(self.attitude_quaternion_encode(time_boot_ms, q1, q2, q3, q4, rollspeed, pitchspeed, yawspeed, rollacc, pitchacc, yawacc), force_mavlink1=force_mavlink1)\n\n            def attitude_quaternion_send_list(self, attitude_quaternion, force_mavlink1=False):\n                '''\n                \n\n                attitude_quaternion        :  (struct)\n\n                '''\n                return self.send(self.attitude_quaternion_encode_list(attitude_quaternion), force_mavlink1=force_mavlink1)\n\n            def attitude_quaternion_send_list_send(self, attitude_quaternion, force_mavlink1=False):\n                '''\n                Send a list of attitude_quaternion messages\n\n                attitude_quaternion        :  (struct)\n\n                '''\n                return self.send_list(self.attitude_quaternion_encode_list(attitude_quaternion), force_mavlink1=force_mavlink1)\n\n            def"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}