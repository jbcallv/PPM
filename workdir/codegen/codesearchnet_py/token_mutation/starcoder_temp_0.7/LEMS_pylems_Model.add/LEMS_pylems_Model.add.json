{"name": "LEMS_pylems_Model.add", "language": "py", "prompt": "def add(self, child):\n        \"\"\"\n        needs a typed child next to the model.\n\n        @param child: Child \" to be added.\n        \"\"\"", "tests": "", "completions": ["\n        self.children.append(child)\n\n    def add_many(self, children):\n        \"\"\"\n        needs a list of typed children next to the model.\n\n        @param children: List of children to be added.\n        \"\"\"\n        self.children.extend(children)\n\n    def get_children(self):\n        \"\"\"\n        returns the children of the model.\n        \"\"\"\n        return self.children\n\n    def set_children(self, children):\n        \"\"\"\n        sets the children of the model.\n\n        @param children: List of children to be set.\n        \"\"\"\n        self.children = children\n\n    def __str__(self):\n        \"\"\"\n        returns a string representation of the model.\n        \"\"\"\n        return \"<\" + self.__class__.__name__ + \" \" + str(self.value) + \">\"\n\n    def __repr__(self):\n        \"\"\"\n        returns a representation of the model.\n        \"\"\"\n        return \"<\" + self.__class__.__name__ + \" \" + str(self.value) + \">\"\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}