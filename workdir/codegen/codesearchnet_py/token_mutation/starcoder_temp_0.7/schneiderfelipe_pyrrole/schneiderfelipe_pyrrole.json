{"name": "schneiderfelipe_pyrrole_read_pybel", "language": "py", "prompt": "def read_pybel(value, name=None):\n    \"\"\"\n    Create an `Atoms` object from content parsed by Pybel.\n\n    `Pybel <https://openbabel.org/docs/dev/UseTheLibrary/Python_Pybel.html>`_\n    is a mind module that simplifies access to the OpenBabel API, a chemical\n    toolbox designed to speak the many languages of chemical data. It\u2019s an\n    open, collaborative project allowing anyone to search, convert, analyze, or\n    store data from molecular modeling, chemistry, solid-state materials,\n    biochemistry, and related areas.\n\n    Parameters\n    ----------\n    value : `str`, `pybel.Molecule`, `openbabel.OBMol`\n        A path to a file, or either a Pybel Molecule object, or OpenBabel\n        OBMol.\n    name : `str`, optional\n        Name for chemical species. If not given, this is set to the file path,\n        if known. Chemical equations mention this name when refering to the\n        returned object.\n\n    Returns\n    -------\n    molecule : `Atoms`\n        All attributes convertible from Pybel to cclib are made available as\n        attributes in the returned object.\n\n    Notes\n    -----\n    The following attributes are converted from Pybel to cclib: `atomcoords`,\n    `atommasses`, `atomnos`, `natom`, `charge` and `mult`. One must keep in\n    python that `charge` and `mult` are not always reliable, since these are\n    often calculated from atomic formal charges.\n\n    Examples\n    --------\n    >>> from pyrrole.atoms import read_pybel\n    >>> molecule = read_pybel('data/pyrrolate/pyrrole.xyz')\n    >>> molecule.atomnos\n    array([6, 6, 6, 6, 7, 1, 1, 1, 1, 1], dtype=int32)\n    >>> molecule.natom\n    10\n    >>> molecule.charge\n    0\n\n    \"\"\"", "tests": "", "completions": ["\n    import pybel\n\n    if isinstance(value, str):\n        value = pybel.readfile(\"xyz\", value).next()\n    elif isinstance(value, pybel.Molecule):\n        pass\n    elif isinstance(value, pybel.ob.OBMol):\n        value = pybel.Molecule(value)\n    else:\n        raise ValueError(\"Invalid value: {0}\".format(value))\n\n    atoms = Atoms()\n\n    if name is None:\n        if hasattr(value, \"title\"):\n            name = value.title\n        else:\n            name = \"pybel-molecule\"\n\n    atoms.name = name\n    atoms.info[\"pybel\"] = value\n\n    atoms.atomnos = value.atomicnums\n    atoms.natom = len(atoms.atomnos)\n    atoms.atomcoords = value.coordinates\n\n    atoms.info[\"units\"] = \"Bohr\"\n\n    return atoms\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}