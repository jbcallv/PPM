{"name": "pjuren_pyokit_get_key_value", "language": "py", "prompt": "def get_key_value(parts, key_field_num, ignore_missing_keys, seen_keys,\n                  output_type):\n  \"\"\"\n  get the key value from the line and check it's not a dup. or missing. fields\n  with only missing are considered key (missing).\n\n  :param ignore_missing_keys: if True, return None for missing keys. If false,\n                              missing keys cause an exception\n                              (MissingKeyError).\n  :param seen_keys: a set of keys already seen.\n\n  :return: the key value, or None if the 0 was empty.\n  \"\"\"", "tests": "", "completions": ["\n\n  if key_field_num > 0:\n    key = parts[key_field_num - 1]\n\n    # if key is empty and key_field_num is set, it's a missing key.\n    if not key and not ignore_missing_keys:\n      raise MissingKeyError(\n        \"line has a missing key field, but missing keys are not allowed. \"\n        \"key_field_num = %d, key = %s, line = %s\" % (key_field_num, key, line))\n\n    # check for duplicate keys\n    if key in seen_keys:\n      raise DuplicateKeyError(\n        \"line has a duplicate key field, keys must be unique. key_field_num = \"\n        \"%d, key = %s, line = %s\" % (key_field_num, key, line))\n\n    seen_keys.add(key)\n  else:\n    key = None\n\n  if output_type == 'int':\n    key = int(key)\n\n  return key\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}