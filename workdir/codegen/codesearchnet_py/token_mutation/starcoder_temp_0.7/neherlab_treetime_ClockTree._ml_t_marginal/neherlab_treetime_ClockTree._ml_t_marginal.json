{"name": "neherlab_treetime_ClockTree._ml_t_marginal", "language": "py", "prompt": "def _ml_t_marginal(self, assign_dates=False):\n        \"\"\"\n        Compute the marginal probability distribution of the internal nodes positions by\n        propagating from the tree leaves towards the root. The result of\n        this operation are the probability distributions of each internal node,\n        conditional on the constraints on all leaves of the tree, which have sampling dates.\n        The probability sampling are set as marginal_pos_LH attributes to the nodes.\n\n        Parameters\n        ----------\n\n         assign_dates : bool, default False\n            If True, the distributions dates will be assigned to the nodes as\n            :code:`time_before_present' attributes, and their branch lengths\n            will be corrected accordingly.\n            .. Note::\n                Normally, the dates are assigned by running joint reconstruction.\n\n        Returns\n        -------\n\n         None\n            Every internal node is assigned the probability distribution in form\n            of an interpolation object and sends this value further towards the\n            root.\n\n        \"\"\"", "tests": "", "completions": ["\n        from ete3 import TreeStyle, NodeStyle, TextFace, add_face_to_node, AttrFace\n        import numpy as np\n        from collections import defaultdict\n        from scipy import stats\n\n        if not assign_dates:\n            for node in self.traverse(\"preorder\"):\n                if not node.is_leaf():\n                    node.marginal_pos_LH = stats.rv_discrete(\n                        values=(np.arange(0, len(node.get_leaf_names())),\n                                node.up.marginal_pos_LH.pmf(np.arange(0, len(node.get_leaf_names())))))\n        else:\n            # create a dictionary of nodes and their respective leaves\n            # and the respective sampling dates\n            node_leaves = defaultdict(list)\n            node_dates = defaultdict(list)\n            for leaf in self.get_leaves():\n                node_leaves[leaf.up].append(leaf.name)\n                node_dates[leaf.up].append(leaf.date)\n\n            # traverse the tree in preorder and compute the marginal distributions\n            for node in self.traverse(\"preorder\"):\n                if not node.is_leaf():\n                    node.marginal_pos_LH = stats.rv_discrete(\n                        values=(np.arange(0, len(node_leaves[node])),\n                                node.up.marginal_pos_LH.pmf(np.arange(0, len(node_leaves[node])))))\n                    node.marginal_pos_LH.date = node_dates[node][0]\n                    node.marginal_pos_LH.time_before_present = (node.marginal_pos_LH.date - self.get_tree_root().date).days\n\n            # traverse the tree in postorder and assign the marginal distributions\n            for node in self.traverse(\"postorder\"):\n                if not node.is_leaf():\n                    node.marginal_pos_LH.pmf = node.marginal_pos_LH.pmf / node.marginal_pos_LH.pmf.sum()\n                    node.marginal_pos_LH.dist = node.marginal_pos_LH.pmf\n                    node.marginal_pos_LH.cdf = np.cumsum(node.marginal_pos_LH.pmf)\n                    if node.up.up is not None:\n                        node.marginal_pos"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}