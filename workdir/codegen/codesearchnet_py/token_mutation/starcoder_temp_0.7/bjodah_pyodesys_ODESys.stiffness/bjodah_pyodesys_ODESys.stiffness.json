{"name": "bjodah_pyodesys_ODESys.stiffness", "language": "py", "prompt": "def stiffness(self, xyp=None, eigenvals_cb=None):\n        \"\"\" [DEPRECATED] Use :meth:`Result.stiffness`, stiffness ration\n\n        Running stiffness ratio from last integration.\n        Calculate sittness ratio, i.e. the ratio between the largest and\n        smallest absolute eigenvalue of the jacobian matrix. The user may\n        supply their own routine for calculating the eigenvalues, or they\n        will be calculated from the SVD (singular , decomposition).\n        Note that calculating the SVD for any but the smallest Jacobians may\n        prove to be prohibitively expensive.\n\n        Parameters\n        ----------\n        xyp : length 3 value (default: None)\n            internal_xout, internal_yout, internal_params, taken\n            from last integration if not specified.\n        eigenvals_cb : callback (optional)\n            Signature (x, y, p) (internal variables), when not provided an\n            internal routine will use ``self.j_cb`` and ``scipy.linalg.svd``.\n\n        \"\"\"", "tests": "", "completions": ["\n        warnings.warn(\n            \"Deprecation Warning:  stiffness() is deprecated.  \"\n            \"Use stiffness() instead.\",\n            DeprecationWarning\n        )\n        return self.stiffness_ratio(xyp=xyp, eigenvals_cb=eigenvals_cb)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}