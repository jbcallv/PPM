{"name": "automl_HpBandSter_LCNetWrapper.extend_partial", "language": "py", "prompt": "def extend_partial(self, times, obs_times, obs_losses, config=None):\n        \"\"\"\n            extends a partially observed curve\n\n            Parameters:\n            -----------\n\n            times: data array\n                input where to predict the loss\n            obs_times: numpy array\n                times where the curve has already been observed\n            obs_losses: numpy array\n                corresponding observed losses\n            config: numpy array\n                numerical reperesentation of the config; None if no config\n                times is available\n                \n            Returns:\n            --------\n            \n            mean and variance prediction at input times\n                \n                \n        \"\"\"", "tests": "", "completions": ["\n\n        if config is not None:\n            if self.config_dim is not None:\n                config = self.config_to_array(config)\n            else:\n                config = np.atleast_2d(config)\n        else:\n            config = np.zeros((len(times), 0))\n\n        n_dim = len(config[0])\n        self.n_dim = n_dim\n        config = config.astype(np.float32)\n\n        obs_times = obs_times.astype(np.float32)\n        obs_losses = obs_losses.astype(np.float32)\n\n        times = times.astype(np.float32)\n\n        if self.config_dim is not None:\n            assert n_dim == self.config_dim, \"wrong config dimension\"\n\n        assert len(obs_times) == len(obs_losses), \"wrong data shape\"\n\n        obs_times = obs_times.reshape(-1, 1)\n        obs_losses = obs_losses.reshape(-1, 1)\n\n        times = times.reshape(-1, 1)\n\n        if self.config_dim is not None:\n            if len(config.shape) == 1:\n                config = np.atleast_2d(config)\n            assert len(config.shape) == 2, \"wrong config shape\"\n            assert config.shape[0] == len(\n                times\n            ), \"wrong config shape (times, config) expected\"\n\n        assert len(times.shape) == 2, \"wrong times shape\"\n\n        if len(times) == 0:\n            return np.zeros((len(times), 1)), np.zeros((len(times), 1))\n\n        if self.config_dim is not None:\n            assert config.shape[1] == self.config_dim, \"wrong config shape\"\n\n        pred_mean, pred_var = self.partial_predict(obs_times, obs_losses, config)\n\n        if self.config_dim is not None:\n            pred_mean = np.reshape(pred_mean, (len(times), 1))\n            pred_var = np.reshape(pred_var, (len(times), 1))\n\n        return pred_mean, pred_var\n\n    def get_config(self):\n        config = super().get_config()\n        config.update({\"type\": type(self"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}