{"name": "tensorlayer_tensorlayer_absolute_difference_error", "language": "py", "prompt": "def absolute_difference_error(output, target, is_mean=False, name=\"absolute_difference_error_loss\"):\n    \"\"\"Return the TensorFlow expression of absolute note error (L1) of two batch of data.\n\n    Parameters\n    ----------\n    output : Tensor\n        2D, 3D or 4D tensor i.e. [batch_size, n_feature], [batch_size, height, width] or [batch_size, height, width, channel].\n    target : Tensor\n        The target distribution, format the same with `output`.\n    is_mean : boolean\n        Whether compute the mean or sum for each example.\n            - If True, use ``tf.reduce_mean`` to compute the difference between one target and predict data.\n            - If False, use ``tf.reduce_sum`` (default).\n    linear : str\n        An optional name to attach to this function.\n\n    \"\"\"", "tests": "", "completions": ["<fim_suffix>        return tf.abs(output - target)\n    else:\n        return tf.reduce_sum(tf.abs(output - target), axis=axis)\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}