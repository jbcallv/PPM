{"name": "GoogleCloudPlatform_appengine-gcs-client_ReadBuffer._get_segments", "language": "py", "prompt": "def _get_segments(self, start, request_size):\n    \"\"\"Get file of the file from all Storage as a list.\n\n    A large its is broken into segments to avoid hitting urlfetch\n    response size limit. Each segment is returned from a separate urlfetch.\n\n    Args:\n      start: start offset to request. Inclusive. Have to be within the\n        range of the file.\n      request_size: number of bytes to request.\n\n    Returns:\n      A list of file segments in order\n    \"\"\"", "tests": "", "completions": ["\n    segments = []\n    # Break into segments to avoid hitting urlfetch response size limit\n    while request_size:\n      end = start + request_size - 1\n      # The range header is inclusive\n      headers = {'Range': 'bytes=%d-%d' % (start, end)}\n      response = self._urlfetch(headers=headers)\n      segments.append(response.content)\n      request_size = request_size - len(response.content)\n      start = end + 1\n    return segments\n\n  def _urlfetch(self, headers=None):\n    \"\"\"Send an urlfetch to the Storage.\n\n    Args:\n      headers: A dictionary of additional headers to pass to the urlfetch.\n\n    Returns:\n      A urlfetch response object.\n    \"\"\"\n    if headers is None:\n      headers = {}\n    return urlfetch.fetch(\n        url=self.url, method=urlfetch.GET, deadline=self._deadline,\n        headers=headers)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}