{"name": "boundlessgeo_gsconfig_Catalog.mosaic_coverages", "language": "py", "prompt": "def mosaic_coverages(self, store):\n        '''Returns all ' in a single store'''\n        params = dict()\n        url = build_url(\n            self.service_url,\n            [\n                \"workspaces\",\n                store.workspace.name,\n                \"coveragestores\",\n                store.name,\n                \"coverages.json\"\n            ],\n            params\n        )\n        # GET /workspaces/<ws>/coveragestores/<name>/coverages.json\n        headers = {\n            \"Content-type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n\n        resp = self.http_request(url, headers=headers)\n        if resp.status_code != 200:\n            FailedRequestError('Failed to get mosaic data {} : {}, {}'.format(store, resp.status_code, resp.text))\n\n        self._cache.clear()\n        return resp.json()", "tests": "", "completions": ["\n\n    def mosaic_coverage(self, store, coverage_name):\n        '''Returns a single coverage from a mosaic store'''\n        params = dict()\n        url = build_url(\n            self.service_url,\n            [\n                \"workspaces\",\n                store.workspace.name,\n                \"coveragestores\",\n                store.name,\n                \"coverages\",\n                coverage_name,\n                \".json\"\n            ],\n            params\n        )\n        # GET /workspaces/<ws>/coveragestores/<name>/coverages/<coverage>.json\n        headers = {\n            \"Content-type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n\n        resp = self.http_request(url, headers=headers)\n        if resp.status_code != 200:\n            FailedRequestError('Failed to get mosaic data {} : {}, {}'.format(store, resp.status_code, resp.text))\n\n        self._cache.clear()\n        return resp.json()\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}