{"name": "pymupdf_PyMuPDF_showPDFpage", "language": "py", "prompt": "def showPDFpage(\n        page,\n        rect,\n        src,\n        pno=0,\n        overlay=True,\n        keep_proportion=True,\n        rotate=0,\n        reuse_xref=0,\n        clip = None,\n    ):\n    \"\"\"Show page number 'pno' of PDF 'src' in rectangle 'rect'.\n\n    Args:\n        rect: (rect-like) where to place the source image\n        src: (document) image PDF\n        pno: (int) source page number\n        overlay: (bool) put in foreground\n        keep_proportion: (bool) do not change width-height-ratio\n        rotate: (int) degrees (multiple of 90)\n        clip: (rect-like) . of source location rectangle\n    Returns:\n        xref of inserted object (for reuse)\n    \"\"\"", "tests": "", "completions": ["\n    if not src:\n        return None\n\n    assert src[0].objgen == src[1].objgen, \"incompatible document\"\n\n    # get page\n    page_obj = src[pno]\n\n    # create a transformation matrix\n    if clip:\n        clip = Rect.from_quad(clip)\n        clip = clip.normalized()\n\n    matrix = Matrix(1, 0, 0, 1, rect.left, rect.bottom)\n\n    if clip:\n        matrix = clip.transform(matrix)\n\n    if rotate:\n        angle = rotate * pi / 180\n        matrix = Matrix(\n            round(cos(angle), 5),\n            round(sin(angle), 5),\n            -round(sin(angle), 5),\n            round(cos(angle), 5),\n            0,\n            0,\n        ) * matrix\n\n    if keep_proportion:\n        page_rect = page_obj.rect\n        sx = rect.width / page_rect.width\n        sy = rect.height / page_rect.height\n        s = min(sx, sy)\n        matrix = Matrix(s, 0, 0, s, 0, 0) * matrix\n\n    if matrix.a!= 1 or matrix.b!= 0 or matrix.c!= 0 or matrix.d!= 1:\n        page_obj = page_obj.transform(matrix)\n\n    # create content stream\n    stream = [\n        \"q\",\n        \"1 0 0 1 %g %g cm\" % (rect.left, rect.bottom),\n        \"Do\",\n        \"Q\",\n    ]\n    stream = \"\\n\".join(stream)\n\n    # create object\n    obj = page.add_object(page_obj)\n    obj.stream = stream\n    obj.update()\n\n    if overlay:\n        page.Contents.insert(0, obj)\n\n    return obj.xref\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}