{"name": "jmcgeheeiv_pyfakefs_FakeFilesystem.get_open_file", "language": "py", "prompt": "def get_open_file(self, file_des):\n        \"\"\"Return an open file.\n\n        Args:\n            file_des: file descriptor of the open file.\n\n        Raises:\n            OSError: an invalid file descriptor.\n            TypeError: filedes is not an integer.\n\n        Returns:\n            Open a object.\n        \"\"\"", "tests": "", "completions": ["\n        if isinstance(file_des, int):\n            return self.open_files[file_des]\n        else:\n            raise TypeError(\"filedes must be an integer\")\n\n    def close(self, file_des):\n        \"\"\"Close an open file.\n\n        Args:\n            file_des: file descriptor of the open file.\n\n        Raises:\n            OSError: an invalid file descriptor.\n        \"\"\"\n        if file_des in self.open_files:\n            self.open_files.pop(file_des)\n        else:\n            raise OSError(\"Invalid file descriptor\")\n\n    def dup(self, file_des):\n        \"\"\"Duplicate an open file.\n\n        Args:\n            file_des: file descriptor of the open file.\n\n        Returns:\n            file descriptor of the duplicate.\n\n        Raises:\n            OSError: an invalid file descriptor.\n        \"\"\"\n        if file_des not in self.open_files:\n            raise OSError(\"Invalid file descriptor\")\n\n        file = self.open_files[file_des]\n        return self.open(file.name, file.mode, file.bufsize)\n\n    def dup2(self, file_des_1, file_des_2):\n        \"\"\"Duplicate an open file to another file descriptor.\n\n        Args:\n            file_des_1: file descriptor of the open file.\n            file_des_2: file descriptor of the open file.\n\n        Raises:\n            OSError: an invalid file descriptor.\n        \"\"\"\n        if file_des_1 not in self.open_files:\n            raise OSError(\"Invalid file descriptor\")\n\n        file = self.open_files[file_des_1]\n        file.fd = file_des_2\n        self.open_files[file_des_2] = file\n\n    def fstat(self, file_des):\n        \"\"\"Return file status.\n\n        Args:\n            file_des: file descriptor of the open file.\n\n        Raises:\n            OSError: an invalid file descriptor.\n\n        Returns:\n            StatResult object.\n        \"\"\"\n        if file_des not in self.open_files:\n            raise OSError(\"Invalid file descriptor\")\n\n        file = self.open_files[file_des]\n        return StatResult(size=len(file.content), st_mode=0o444)\n\n    def isatty(self, file_des):\n        \"\"\"Return True if the file is a tty.\n\n        Args:\n            file_des: file"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}