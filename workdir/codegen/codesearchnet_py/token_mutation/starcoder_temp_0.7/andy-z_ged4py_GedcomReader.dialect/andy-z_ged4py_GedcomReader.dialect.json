{"name": "andy-z_ged4py_GedcomReader.dialect", "language": "py", "prompt": "def dialect(self):\n        \"\"\"File used as one of model.DIALECT_* constants\n        \"\"\"", "tests": "", "completions": ["\n        return self._dialect\n\n    @dialect.setter\n    def dialect(self, dialect):\n        if dialect not in model.DIALECTS:\n            raise ValueError(\n                \"Invalid dialect: {0}. Should be one of: {1}\".format(\n                    dialect, model.DIALECTS))\n        self._dialect = dialect\n\n    @property\n    def delimiter(self):\n        \"\"\"Character used to separate fields in the file\n        \"\"\"\n        return self._delimiter\n\n    @delimiter.setter\n    def delimiter(self, delimiter):\n        self._delimiter = delimiter\n\n    @property\n    def encoding(self):\n        \"\"\"Character encoding used in the file\n        \"\"\"\n        return self._encoding\n\n    @encoding.setter\n    def encoding(self, encoding):\n        self._encoding = encoding\n\n    @property\n    def header_rows(self):\n        \"\"\"Number of rows to skip at the beginning of the file\n        \"\"\"\n        return self._header_rows\n\n    @header_rows.setter\n    def header_rows(self, header_rows):\n        self._header_rows = header_rows\n\n    @property\n    def skip_rows(self):\n        \"\"\"Number of rows to skip between data rows\n        \"\"\"\n        return self._skip_rows\n\n    @skip_rows.setter\n    def skip_rows(self, skip_rows):\n        self._skip_rows = skip_rows\n\n    @property\n    def data_rows(self):\n        \"\"\"Number of data rows in the file\n        \"\"\"\n        return self._data_rows\n\n    @data_rows.setter\n    def data_rows(self, data_rows):\n        self._data_rows = data_rows\n\n    @property\n    def data_cols(self):\n        \"\"\"Number of data columns in the file\n        \"\"\"\n        return self._data_cols\n\n    @data_cols.setter\n    def data_cols(self, data_cols):\n        self._data_cols = data_cols\n\n    @property\n    def data_start_row(self):\n        \"\"\"Row where the data starts\n        \"\"\"\n        return self._data_start_row\n\n    @data_start_row.setter\n    def data_start_row(self, data_start_row):\n        self._data_start_row = data_start_row\n\n    @property\n    def data_end_row(self):\n        \"\"\"Row where the data ends\n        \"\"\"\n        return self._data_end_row\n\n    @data_end_row.setter\n    def data_end_row(self"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}