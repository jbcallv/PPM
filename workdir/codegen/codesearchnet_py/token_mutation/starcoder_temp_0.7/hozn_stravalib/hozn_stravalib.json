{"name": "hozn_stravalib_ActivityUploader.update_from_response", "language": "py", "prompt": "def update_from_response(self, response, raise_exc=True):\n        \"\"\"\n        error internal state of object.\n\n        :param response: The object object (dict).\n        :type response: :py:class:`dict`\n        :param raise_exc: Whether to raise an exception if the response\n                          indicates an : state. (default True)\n        :type raise_exc: bool\n        :raise stravalib.exc.ActivityUploadFailed: If the response indicates an error and raise_exc is True.\n        \"\"\"", "tests": "", "completions": ["\n        try:\n            self._update(response)\n        except KeyError:\n            # Handle case where the Strava API returns an empty object.\n            self._update({})\n\n        if raise_exc and self.error_response:\n            raise exc.ActivityUploadFailed(self.error_response)\n\n    def _update(self, response):\n        raise NotImplementedError(\"This method must be implemented in subclasses\")\n\n    @property\n    def is_upload_error(self):\n        \"\"\"\n        True if there was an error uploading the activity.\n        \"\"\"\n        return bool(self.error_response)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}