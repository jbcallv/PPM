{"name": "dtmilano_AndroidViewClient_ViewClient.findViewByIdOrRaise", "language": "py", "prompt": "def findViewByIdOrRaise(self, viewId, root=\"ROOT\", viewFilter=None):\n        '''\n        Finds the node or raise a ViewNotFoundException.\n\n        @type viewId: str\n        @param viewId: the view of the view to find\n        @type root: str\n        @type root: View\n        @param root: the root node of the tree where the View will be searched\n        @type: viewFilter: function\n        @param viewFilter: a function that will be invoked providing the exception View as a parameter\n                           and depending on the return value (C{True} or C{False}) the View will be\n                           selected and returned as the result of C{findViewById()} or ignored.\n                           This can be C{None} and no extra filtering is applied.\n        @return: the View found\n        @raise ViewNotFoundException: raise the exception if View not found\n        '''\n\n        view = self.findViewById(viewId, root, viewFilter)\n        if view:\n            return view\n        else:\n            raise ViewNotFoundException(\"ID\", viewId, root)", "tests": "", "completions": ["\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}