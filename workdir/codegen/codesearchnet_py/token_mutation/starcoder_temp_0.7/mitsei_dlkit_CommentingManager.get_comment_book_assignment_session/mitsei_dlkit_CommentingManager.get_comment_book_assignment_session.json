{"name": "mitsei_dlkit_CommentingManager.get_comment_book_assignment_session", "language": "py", "prompt": "def get_comment_book_assignment_session(self):\n        \"\"\"Gets the session for assigning comment to book mappings.\n\n        return: (osid.commenting.CommentBookAssignmentSession) - a\n                ``CommentBookAssignmentSession``\n        raise:  - - unable to complete request\n        raise:  Unimplemented - ``supports_comment_book_assignment()``\n                is ``false``\n        *compliance: * -- This procedure must be implemented if\n        ``supports_comment_book_assignment()`` is ``true``.*\n\n        \"\"\"", "tests": "", "completions": ["\n        if not self.supports_comment_book_assignment():\n            raise errors.Unimplemented()\n        # pylint: disable=no-member\n        return sessions.CommentBookAssignmentSession(runtime=self._runtime)\n\n    comment_book_assignment_session = property(fget=get_comment_book_assignment_session)\n\n    def get_comment_book_assignment_session_for_book(self, book_id=None):\n        \"\"\"Gets the session for assigning comment to book mappings for the given book.\n\n        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n        return: (osid.commenting.CommentBookAssignmentSession) - a\n                ``CommentBookAssignmentSession``\n        raise:  NotFound - ``book_id`` not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_book_assignment()``\n                or ``supports_visible_federation()`` is ``false``\n        *compliance: * -- This procedure must be implemented if\n        ``supports_comment_book_assignment()`` and\n        ``supports_visible_federation()`` are ``true``.*\n\n        \"\"\"\n        if not self.supports_comment_book_assignment():\n            raise errors.Unimplemented()\n        ##\n        # Also include check to see if the catalog Id is found otherwise raise errors.NotFound\n        ##\n        # pylint: disable=no-member\n        return sessions.CommentBookAssignmentSession(book_id, runtime=self._runtime)\n\n    def get_book_lookup_session(self):\n        \"\"\"Gets the ``OsidSession`` associated with the book lookup service.\n\n        return: (osid.commenting.BookLookupSession) - a\n                ``BookLookupSession``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_lookup()`` is ``false``\n        *compliance: * -- This session must be implemented if\n        ``supports_book_lookup()`` is ``true``.*\n\n        \"\"\"\n        if not self.supports_book_lookup():\n            raise errors.Unimplemented()\n        # pylint: disable=no-member\n        return sessions.BookLookupSession(runtime=self._runtime)\n\n    book_lookup_session = property(fget=get_book_lookup_session)\n\n    def get_book_query_session(self):\n       "], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}