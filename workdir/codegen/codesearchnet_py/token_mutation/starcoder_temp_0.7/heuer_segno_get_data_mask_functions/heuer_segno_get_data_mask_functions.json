{"name": "heuer_segno_get_data_mask_functions", "language": "py", "prompt": "def get_data_mask_functions(is_micro):\n    \"\"\"\n    Returns the data mask functions.\n\n    ISO/IEC 18004:2015(E) -- 7.8.2 Data mask patterns (page 50)\n    Table 10 \u2014 Data mask pattern generation conditions (page 50)\n\n    ===============     =====================   =====================================\n    QR Code mod     Micro QR Code Pattern\ufffc  Condition\n    ===============     =====================   =====================================\n    000                                         (i + j) mod 2 = 0\n    001                 00                      ##2 mod 2 = 0\n    010                                         j [UNK] 3 = 0\n    011                                         (i + j) mod 3 = 0\n    100                 01                      ((i div 2) + (j div 3)) mod 2 = 0\n    101                                         (i j) mod 2 + (i j) mod 3 = 0\n    110                 10                      ((i j) mod 2 + (i j) mod 3) mod 2 = 0\n    111                 11                      ((i+j) mod 2 + (i j) mod 3) mod 2 = 0\n    ===============     =====================   =====================================\n\n    :param is_micro: Indicates if data mask functions for a Micro QR Code\n            should be returned\n    :return: A tuple of functions\n    \"\"\"", "tests": "", "completions": ["<fim_suffix>2015(E) -- 7.8.3 Alignment patterns (page 51)\n    Table 13 \u2014 QR Code and Micro QR Code alignment pattern positions (page 51)\n\n    :param version: The version of the QR Code\n    :return: A list of the alignment positions\n    \"\"\"\n    if version == 1:\n        positions = []\n    elif version == 2:\n        positions = [6]\n    elif version in range(3, 10):\n        positions = [6, 18]\n    elif version in range(10, 27):\n        positions = [6, 22]\n    elif version in range(27, 41):\n        positions = [6, 26]\n    else:\n        raise ValueError(\"Version out of range\")\n    return positions\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}