{"name": "infothrill_python-dyndnsc_PluginManager.options", "language": "py", "prompt": "def options(self, parser, env):\n        \"\"\"Register commandline values with the given parser.\n\n        Implement this method for normal options behavior with protection from\n        OptionConflictErrors. If you override this method and want the default\n        --with-$name $ to be registered, be sure to call super().\n\n        :param parser: - parser object\n        :param env:\n        \"\"\"", "tests": "", "completions": ["\n        for option in self._options:\n            if option.is_global:\n                option.register_opt(parser, env)\n            else:\n                option.register_opt(parser)\n\n    def post_process_args(self, args, env):\n        \"\"\"Post-process parsed values.\n\n        :param args: - parsed namespace\n        :param env:\n        \"\"\"\n        for option in self._options:\n            if option.is_global:\n                option.post_process(args, env)\n            else:\n                option.post_process(args)\n\n    def add_argument_group(self, parser, group_name):\n        \"\"\"Add an argument group to parser.\n\n        :param parser: - parser object\n        :param group_name: - argument group name\n        :return: - argument group\n        \"\"\"\n        group = parser.add_argument_group(group_name)\n        return group\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}