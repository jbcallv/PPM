{"name": "pyblish_pyblish-houdini__init", "language": "py", "prompt": "def _init():\n    \"\"\"Try loading each . in turn\n\n    modules note: the entire Qt module is replaced with this code:\n        sys.modules[\"Qt\"] = binding()\n\n    This means no module or variables can be called after\n    this has executed.\n\n    \"\"\"", "tests": "", "completions": ["\n    import sys\n    import os\n    import imp\n\n    for p in sys.path:\n        qtpath = os.path.join(p, \"PyQt4\")\n        if os.path.exists(qtpath):\n            # Remove the qtpath from sys.path, otherwise the recursive\n            # imports will fail\n            sys.path.remove(p)\n            for f in os.listdir(qtpath):\n                if f.startswith(\"Qt\") and f.endswith(\".py\"):\n                    modname = f[:-3]\n                    try:\n                        m = imp.load_module(modname, *imp.find_module(modname, [qtpath]))\n                        sys.modules[modname] = m\n                    except ImportError:\n                        print(\"Cannot import %s\" % modname)\n                        raise\n            sys.modules[\"Qt\"] = binding()\n            return\n\n\n_init()\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}