{"name": "HDI-Project_ballet_get_contrib_features", "language": "py", "prompt": "def get_contrib_features(project_root):\n    \"\"\"Get contributed features for a all at project_root\n\n    For a project ``foo``, walks modules within the ``foo.features.contrib``\n    subpackage. A single object that is an instance of ``ballet.Feature`` is\n    imported if present in each module. The resulting ``Feature`` objects are\n    collected.\n\n    Args:\n        project_root (str, path-like): module to project root\n\n    Returns:\n        List[ballet.Feature]: list of return objects\n    \"\"\"", "tests": "", "completions": ["\n    features = []\n\n    for module in get_contrib_modules(project_root):\n        try:\n            obj = import_object(module, 'feature')\n            if isinstance(obj, Feature):\n                features.append(obj)\n        except ImportError:\n            pass\n\n    return features\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}