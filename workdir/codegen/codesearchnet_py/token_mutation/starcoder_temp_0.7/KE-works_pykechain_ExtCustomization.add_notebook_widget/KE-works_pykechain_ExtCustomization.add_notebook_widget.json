{"name": "KE-works_pykechain_ExtCustomization.add_notebook_widget", "language": "py", "prompt": "def add_notebook_widget(self, notebook, custom_title=False, height=None):\n        \"\"\"\n        Add a KE-chain Notebook (e.g. notebook widget) to the customization.\n\n        The widget will be saved to KE-chain.\n\n        :param notebook: The Notebook to which the button will be coupled and will start when the int is pressed.\n        :type notebook: :class:`Service` or UUID\n        :param custom_title: A custom title for the notebook widget\n            * False (default): Notebook name\n            * String value: Custom title\n            * None: No title\n        :type custom_title: numbers or basestring or None\n        :param height: The height of the Notebook in pixels\n        :type height: int or None\n        :raises IllegalArgumentError: When unknown or illegal button are passed.\n        \"\"\"", "tests": "", "completions": ["\n        if not isinstance(notebook, (UUID, Service)):\n            raise IllegalArgumentError(\"Pass a notebook widget or UUID\")\n\n        if isinstance(notebook, Service):\n            notebook = notebook.id\n\n        self._set_custom_widget_to_add(\n            WidgetTypes.NOTEBOOK,\n            [notebook],\n            custom_title=custom_title,\n            height=height,\n        )\n\n    def add_input_widget(\n        self,\n        value=None,\n        title=None,\n        name=None,\n        description=None,\n        placeholder=None,\n        height=None,\n        required=None,\n        initial=None,\n        advanced=None,\n        type=None,\n    ):\n        \"\"\"\n        Add an input widget to the customization.\n\n        The widget will be saved to KE-chain.\n\n        :param value: Initial value for the input box\n        :type value: basestring or int or float or bool or dict or list\n        :param title: The title of the widget\n        :type title: basestring\n        :param name: The name of the widget\n        :type name: basestring\n        :param description: The description of the widget\n        :type description: basestring\n        :param placeholder: The placeholder of the widget\n        :type placeholder: basestring\n        :param height: The height of the widget in pixels\n        :type height: int or None\n        :param required: Whether the widget should be required or not.\n        :type required: bool\n        :param initial: Whether the widget should be initially shown or not.\n        :type initial: bool\n        :param advanced: Whether the widget should be shown in the advanced settings section.\n        :type advanced: bool\n        :param type: The type of the widget.\n        :type type: basestring\n        \"\"\"\n        self._set_custom_widget_to_add(\n            WidgetTypes.INPUT,\n            [value, title, name, description, placeholder, height, required, initial, advanced, type],\n        )\n\n    def add_dropdown_widget(self, values, title=None, name=None, description=None, placeholder=None, height=None):\n        \"\"\"\n        Add a dropdown widget to the customization.\n\n        The widget will be saved to KE-chain.\n\n        :param values: List of dropdown values\n        :type values: list\n        :param title: The title of the widget\n        :type title: basestring\n        :param name: The name of the widget\n        :type name: basestring\n       "], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}