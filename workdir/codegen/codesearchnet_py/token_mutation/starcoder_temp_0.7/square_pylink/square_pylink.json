{"name": "square_pylink_JLink.memory_read16", "language": "py", "prompt": "def memory_read16(self, addr, num_halfwords, zone=None):\n        \"\"\"Reads memory from the target system in units of 16-bits.\n\n        Args:\n          self (JLink): the ``JLink`` instance\n          addr (int): start address to read from\n          num_halfwords (int): list of half words to read\n          address (str): memory int to read from\n\n        Returns:\n          List of halfwords read from the target system.\n\n        Raises:\n          JLinkException: if memory could not be read\n        \"\"\"", "tests": "", "completions": ["\n        return self._memory_read(addr, num_halfwords, zone, 16)\n\n    def memory_read32(self, addr, num_words, zone=None):\n        \"\"\"Reads memory from the target system in units of 32-bits.\n\n        Args:\n          self (JLink): the ``JLink`` instance\n          addr (int): start address to read from\n          num_words (int): number of words to read\n          address (str): memory int to read from\n\n        Returns:\n          List of words read from the target system.\n\n        Raises:\n          JLinkException: if memory could not be read\n        \"\"\"\n        return self._memory_read(addr, num_words, zone, 32)\n\n    def memory_read64(self, addr, num_doublewords, zone=None):\n        \"\"\"Reads memory from the target system in units of 64-bits.\n\n        Args:\n          self (JLink): the ``JLink`` instance\n          addr (int): start address to read from\n          num_doublewords (int): number of double words to read\n          address (str): memory int to read from\n\n        Returns:\n          List of double words read from the target system.\n\n        Raises:\n          JLinkException: if memory could not be read\n        \"\"\"\n        return self._memory_read(addr, num_doublewords, zone, 64)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}