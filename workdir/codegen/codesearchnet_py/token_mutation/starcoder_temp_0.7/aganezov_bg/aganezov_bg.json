{"name": "aganezov_bg_BreakpointGraph.__update", "language": "py", "prompt": "def __update(self, breakpoint_graph, merge_edges=False):\n        \"\"\" Updates a current :class`BreakpointGraph` object with information from a supplied :class`BreakpointGraph` instance.\n\n        Depending of a ``merge_edges`` flag, while updating of a current :class`BreakpointGraph` object is occuring, edges between similar vertices can be merged to already existing ones.\n\n        :param breakpoint_graph: a breakpoint current to extract edges from, which will be then added to the current\n        :type breakpoint_graph: :class`BreakpointGraph`\n        :param merge_edges: flag to indicate if edges to be added to ##graph :class`BreakpointGraph` object are to be merged to already existing ones\n        :type merge_edges: ``Boolean``\n        :return: ``None``, performs inplace changes\n        \"\"\"", "tests": "", "completions": ["\n        for vertex in breakpoint_graph.vertices:\n            if self.has_vertex(vertex.chromosome, vertex.position, vertex.strand):\n                self.get_vertex(vertex.chromosome, vertex.position, vertex.strand).merge(vertex, merge_edges)\n            else:\n                self.add_vertex(vertex)\n\n        for edge in breakpoint_graph.edges:\n            if self.has_edge(edge.source.chromosome, edge.source.position, edge.source.strand, edge.target.chromosome, edge.target.position, edge.target.strand):\n                self.get_edge(edge.source.chromosome, edge.source.position, edge.source.strand, edge.target.chromosome, edge.target.position, edge.target.strand).merge(edge, merge_edges)\n            else:\n                self.add_edge(edge)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}