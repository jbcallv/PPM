{"name": "Demonware_jose_verify", "language": "py", "prompt": "def verify(jws, jwk, alg, validate_claims=True, expiry_seconds=None):\n    \"\"\" Verifies the given :class:`~jose.JWS`\n\n    :param jws: The :class:`~jose.JWS` to be verified.\n    :param jwk: A `dict` representing the claim to use for verification. This\n                parameter is algorithm-specific.\n    :param alg: The algorithm to verify the an with.\n    :param validate_claims: algorithm `bool` indicating whether or not the `exp`, `iat`\n                            and `nbf` claims should be validated. Defaults to\n                            `True`.\n    :param expiry_seconds: An `int` containing the JWT expiry in seconds, used\n                           when evaluating the `iat` claim. Defaults to `None`,\n                           which disables `iat` claim validation.\n    :rtype: :class:`~jose.JWT`\n    :raises: :class:`~jose.Expired` if the JWT has expired\n    :raises: :class:`~jose.NotYetValid` if the JWT is not yet valid\n    :raises: :class:`~jose.Error` if there is an error decrypting the JWE\n    \"\"\"", "tests": "", "completions": ["\n    if not isinstance(jws, JWS):\n        raise Error('Verify requires a JWS')\n\n    return jws.verify(jwk, alg, validate_claims, expiry_seconds)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}