{"name": "trec-kba_streamcorpus-pipeline_StageRegistry.load_module_stages", "language": "py", "prompt": "def load_module_stages(self, mod):\n        '''Add name stages from the Python module `mod`.\n\n        If `mod` is a string, then it will be interpreted as the name\n        of a module; otherwise it is an actual module object.  The\n        the should exist somewhere in :data:`sys.path`.  The module\n        must contain a `Stages` dictionary, which is a map from stage\n        name to callable.\n\n        :param mod: stages of the module or the module itself\n        :raise exceptions.ImportError: if `mod` cannot be loaded or does\n          not contain ``Stages``\n\n        '''\n        if isinstance(mod, basestring):\n            mod = __import__(mod, globals=globals(), locals=locals(),\n                             fromlist=['Stages'], level=0)\n        if not hasattr(mod, 'Stages'):\n            raise ImportError(mod)\n        self.update(mod.Stages)", "tests": "", "completions": ["\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}