{"name": "zomux_deepy_NeuralTrainer._run_valid", "language": "py", "prompt": "def _run_valid(self, epoch, valid_set, dry_run=False, save_path=None):\n        \"\"\"\n        as one valid iteration, as for if to continue training.\n        \"\"\"", "tests": "", "completions": ["\n        valid_loader = DataLoader(valid_set, self.args.batch_size, shuffle=False, drop_last=False,\n                                  collate_fn=self.collate_fn)\n\n        if save_path is not None:\n            self.model.save_model(save_path)\n\n        self.model.eval()\n\n        valid_loss = 0\n        valid_acc = 0\n\n        with torch.no_grad():\n            for data, label in tqdm(valid_loader, desc=\"Valid Iter\", disable=dry_run):\n                data, label = data.to(self.args.device), label.to(self.args.device)\n                pred = self.model(data)\n\n                loss = self.loss_fn(pred, label)\n                acc = (torch.argmax(pred, dim=-1) == label).float().mean().item()\n\n                valid_loss += loss.item()\n                valid_acc += acc\n\n        self.model.train()\n\n        return valid_loss / len(valid_loader), valid_acc / len(valid_loader)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}