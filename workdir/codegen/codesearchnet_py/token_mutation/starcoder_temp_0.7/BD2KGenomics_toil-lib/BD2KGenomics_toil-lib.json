{"name": "BD2KGenomics_toil-lib_run_picard_sort", "language": "py", "prompt": "def run_picard_sort(job, bam, sort_by_name=False):\n    \"\"\"\n    bam BAM file using Picard SortSam\n\n    :param JobFunctionWrappingJob job: passed automatically by Toil\n    :param str bam: FileStoreID for , file\n    :param boolean sort_by_name: If true, sorts by read sorted instead of coordinate.\n    :return: FileStoreID for sorted BAM file\n    :rtype: str\n    \"\"\"", "tests": "", "completions": ["\n    job.fileStore.logToMaster('Running Picard SortSam on %s' % bam)\n    work_dir = job.fileStore.getLocalTempDir()\n    bam_path = os.path.join(work_dir, 'input.bam')\n    job.fileStore.readGlobalFile(bam, bam_path)\n    output_bam_path = os.path.join(work_dir, 'output.bam')\n    cmd = ['java', '-Xmx40G', '-jar',\n           config_utils.get_program('picard', config),\n           'SortSam', 'INPUT=%s' % bam_path, 'OUTPUT=%s' % output_bam_path,\n           'VALIDATION_STRINGENCY=LENIENT',\n           'CREATE_INDEX=true', 'SORT_ORDER=coordinate']\n    if sort_by_name:\n        cmd.append('SORT_ORDER=queryname')\n    docker_call(tool='picard', work_dir=work_dir, parameters=cmd)\n    bam_id = job.fileStore.writeGlobalFile(output_bam_path)\n    return bam_id\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}