{"name": "tensorflow_cleverhans_CarliniWagnerL2.generate", "language": "py", "prompt": "def generate(self, x, **kwargs):\n    \"\"\"\n    order a tensor that constructs adversarial examples for the given\n    input. Generate uses tf.py_func in tensor to operate over tensors.\n\n    :param x: A : with the inputs.\n    :param kwargs: See `parse_params`\n    \"\"\"", "tests": "", "completions": ["\n\n    # Parse and save attack-specific parameters\n    assert self.parse_params(**kwargs)\n\n    # Ensure that order is 1\n    if not self.order == 1:\n        raise NotImplementedError(\"Only order=1 is currently implemented.\")\n\n    import tensorflow as tf\n    from. import attack_tf\n\n    # Define graph w/ inputs\n    self.x = x\n    self.model.set_params(**self.model_params)\n    preds = self.model.predict(x)\n    self.y = tf.to_int32(tf.argmax(preds, 1))\n\n    # Define graph w/ computation\n    adv_x = attack_tf(\n        model=self.model,\n        x=self.x,\n        y=self.y,\n        grad_fn=self.grad_fn,\n        loss_fn=self.loss_fn,\n        eps=self.eps,\n        eps_iter=self.eps_iter,\n        nb_iter=self.nb_iter,\n        rand_init=self.rand_init,\n        clip_min=self.clip_min,\n        clip_max=self.clip_max,\n        targeted=self.targeted,\n        ord=self.ord,\n        decay_factor=self.decay_factor,\n        sanity_checks=self.sanity_checks,\n    )\n\n    # Run computation graph\n    with tf.Session() as sess:\n        x_adv = sess.run(adv_x)\n\n    return x_adv\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}