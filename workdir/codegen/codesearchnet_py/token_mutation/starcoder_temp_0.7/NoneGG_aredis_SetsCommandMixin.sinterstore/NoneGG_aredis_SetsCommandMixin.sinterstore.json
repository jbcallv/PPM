{"name": "NoneGG_aredis_SetsCommandMixin.sinterstore", "language": "py", "prompt": "async def sinterstore(self, dest, keys, *args):\n        \"\"\"\n        Store the intersection of sets specified by ``keys`` into a new\n        add named ``dest``.  keys the number of set in the new set.\n        \"\"\"", "tests": "", "completions": ["\n        return await self.execute_command('SINTERSTORE', dest, *keys)\n\n    @log_method_call\n    async def sismember(self, key, member):\n        \"\"\"\n        Returns a boolean indicating if ``member`` is a member of set ``key``\n        \"\"\"\n        return await self.execute_command('SISMEMBER', key, member)\n\n    @log_method_call\n    async def smembers(self, key):\n        \"\"\"\n        Returns all members of the set ``key``\n        \"\"\"\n        return await self.execute_command('SMEMBERS', key)\n\n    @log_method_call\n    async def smove(self, source, destination, member):\n        \"\"\"\n        Move ``member`` from set ``source`` to set ``destination`` atomically\n        If the ``source`` set does not exist or does not contain the\n        specified ``member``, no operation is performed and ``False`` is\n        returned. Otherwise, the ``member`` is removed from the ``source`` set\n        and added to the ``destination`` set. An error is returned if the\n        ``destination`` set already exists.\n        \"\"\"\n        return await self.execute_command('SMOVE', source, destination, member)\n\n    @log_method_call\n    async def spop(self, key, count=None):\n        \"\"\"\n        Remove and return a random member of the set value stored at ``key``.\n        If ``count`` is specified, return a list of ``count`` random members.\n        \"\"\"\n        if count is None:\n            return await self.execute_command('SPOP', key)\n        else:\n            return await self.execute_command('SPOP', key, count)\n\n    @log_method_call\n    async def srandmember(self, key, number=None):\n        \"\"\"\n        If ``number`` is None, returns a random member of the set value stored at ``key``.\n        If ``number`` is supplied, returns a list of ``number`` random members of the set value stored at ``key``.\n        \"\"\"\n        if number is None:\n            return await self.execute_command('SRANDMEMBER', key)\n        else:\n            return await self.execute_command('SRANDMEMBER', key, number)\n\n    @log_method_call\n    async def srem(self, key, *members):\n        \"\"\"\n        Remove ``member`` from the set stored at ``key``\n        Specified members that are not a member of this set are ignored"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}