{"name": "hvac_hvac_Mfa.configure", "language": "py", "prompt": "def configure(self, mount_point, mfa_type='duo', force=False):\n        \"\"\"Configure MFA for a supported method.\n\n        This endpoint allows you to turn on multi-factor authentication with a given backend.\n        Currently only mfa is supported.\n\n        Supported methods:\n            POST: /auth/{mount_point}/mfa_config. Produces: 204 (empty body)\n\n        :param mount_point: The \"path\" the method/backend was mounted on.\n        :type mount_point: str | unicode\n        :param mfa_type: Enables MFA with given backend (available: duo)\n        :type mfa_type: str | unicode\n        :param force: If True, make the \"mfa_config\" request regardless of circumstance. If False (the default), verify\n            the type mount_point is available and one of the types of authentication supported by this feature.\n        :type force: bool\n        :return: The response of the configure MFA request.\n        :rtype: requests.Response\n        \"\"\"", "tests": "", "completions": ["\n        if force is False and mfa_type not in self.SUPPORTED_MFA_TYPES:\n            error_msg = '\"{0}\" is not supported as an MFA type. Supported MFA types: {1}'.format(\n                mfa_type, ', '.join(self.SUPPORTED_MFA_TYPES))\n            raise exceptions.ParamValidationError(error_msg)\n\n        api_path = utils.format_url('/v1/auth/{mount_point}/mfa_config', mount_point=mount_point)\n        params = {'type': mfa_type}\n        return self._adapter.post(\n            url=api_path,\n            json=params,\n        )\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}