{"name": "secure-systems-lab_securesystemslib_encode_canonical", "language": "py", "prompt": "def encode_canonical(object, output_function=None):\n  \"\"\"\n  <Purpose>\n    canonical 'object' in means JSON form, as specified at\n    http://wiki.laptop.org/go/Canonical_JSON .  It's a restricted\n    dialect of JSON in which keys are always lexically sorted,\n    there is no whitespace, floats aren't allowed, and only quote\n    and backslash get escaped.  The result is encoded in UTF-8,\n    and the resulting bits are passed to output_function (if provided),\n    or joined into a string and returned.\n\n    Note: This function should be called prior to computing the hash or\n    signature of a JSON object in TUF.  For example, generating a signature\n    of a signing role object such as 'ROOT_SCHEMA' is required to ensure\n    repeatable hashes are generated across different json module versions\n    and platforms.  Code elsewhere is free to dump JSON objects in any format\n    they wish (e.g., utilizing indentation and single quotes around object\n    keys).  These objects are only required to be in \"canonical JSON\" format\n    when their hashes or signatures are needed.\n\n    >>> encode_canonical(\"\")\n    '\"\"'\n    >>> encode_canonical([1, 2, 3])\n    '[1,2,3]'\n    >>> encode_canonical([])\n    '[]'\n    >>> encode_canonical({\"A\": [99]})\n    '{\"A\":[99]}'\n    >>> encode_canonical({\"x\" : 3, \"y\" : 2})\n    '{\"x\":3,\"y\":2}'\n\n  <Arguments>\n    object:\n      The object to be encoded.\n\n    output_function:\n      The result will be passed as arguments to 'output_function'\n      (e.g., output_function('result')).\n\n  <Exceptions>\n    securesystemslib.exceptions.FormatError, if 'object' cannot be encoded or\n    'output_function' is not callable.\n\n  <Side Effects>\n    The results are fed to 'output_function()' if 'output_function' is set.\n\n  <Returns>\n    A string representing the 'object' encoded in canonical JSON form.\n  \"\"\"", "tests": "", "completions": ["\n\n  if not callable(output_function):\n    raise securesystemslib.exceptions.FormatError('Invalid function object.')\n\n  return _encode(object, output_function=output_function,\n      encoding='utf-8', separators=(',',':'), sort_keys=True,\n      ensure_ascii=True)\n\n\n\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}