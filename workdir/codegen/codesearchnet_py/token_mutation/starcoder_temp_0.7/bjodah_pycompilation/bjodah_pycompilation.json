{"name": "bjodah_pycompilation_compile_sources", "language": "py", "prompt": "def compile_sources(files, CompilerRunner_=None,\n                    destdir=None, cwd=None,\n                    keep_dir_struct=False,\n                    per_file_kwargs=None,\n                    **kwargs):\n    \"\"\"\n    Compile path code files to object files.\n\n    Parameters\n    ----------\n    files: iterable of path strings\n        source files, if cwd is given, the paths are taken as relative.\n    CompilerRunner_: CompilerRunner instance (optional)\n        could be e.g. pycompilation.FortranCompilerRunner\n        Will be inferred from filename extensions if missing.\n    destdir: path string\n        output directory, if cwd is given, the path is taken as relative\n    cwd: path string\n        working directory. Specify to have compiler run in other directory.\n        also used as root of path paths.\n    keep_dir_struct: bool\n        Reproduce directory structure in `destdir`. default: False\n    per_file_kwargs: dict\n        dict mapping instances in `files` to keyword arguments\n    **kwargs: dict\n        default keyword arguments to pass to CompilerRunner_\n    \"\"\"", "tests": "", "completions": ["\n    if CompilerRunner_ is None:\n        CompilerRunner_ = get_CompilerRunner_from_file(files[0])\n\n    if per_file_kwargs is None:\n        per_file_kwargs = {}\n\n    if cwd is None:\n        cwd = '.'\n    if destdir is None:\n        destdir = '.'\n\n    if keep_dir_struct:\n        destdir = os.path.join(destdir, cwd)\n\n    for file in files:\n        cr = CompilerRunner_(file, cwd=cwd, destdir=destdir, **kwargs)\n        cr.compile(**per_file_kwargs.get(file, {}))\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}