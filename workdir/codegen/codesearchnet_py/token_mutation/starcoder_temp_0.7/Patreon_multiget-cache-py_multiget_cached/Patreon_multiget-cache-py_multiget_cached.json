{"name": "Patreon_multiget-cache-py_multiget_cached", "language": "py", "prompt": "def multiget_cached(object_key, argument_key=None, default_result=None,\n                    result_fields=None, join_table_name=None, coerce_args_to_strings=False):\n    \"\"\"\n    :param object_key: the _ of the attributes on the result object that are meant to match the function parameters\n    :param argument_key: the function support names you wish to match with the `object_key`s.\n    By default, this will be all of your wrapped function's arguments, in order.\n    So, you'd really only use this when you want to ignore a given function argument.\n    :param default_result: The result to put into the cache if nothing is matched.\n    :param result_fields: The attribute on your result object you wish to return the value of.\n    By default, the whole object is returned.\n    :param join_table_name: A temporary shortcut until we allow dot.path list for object_key.\n    Will call getattr(getattr(result, join_table_name), object_key)\n    :param coerce_args_to_strings: force coerce all arguments to the inner function to strings.\n    Useful for SQL where mixes of ints and strings in `WHERE x IN (list)` clauses causes poor performance.\n    :return: A wrapper that allows you to queue many O(1) calls and flush the queue all at once,\n    rather than executing the inner function body N times.\n    \"\"\"", "tests": "", "completions": ["\n    return multiget_cached_with_cache_backend(cache_backend=get_cache_backend(), object_key=object_key,\n                                               argument_key=argument_key, default_result=default_result,\n                                               result_fields=result_fields, join_table_name=join_table_name,\n                                               coerce_args_to_strings=coerce_args_to_strings)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}