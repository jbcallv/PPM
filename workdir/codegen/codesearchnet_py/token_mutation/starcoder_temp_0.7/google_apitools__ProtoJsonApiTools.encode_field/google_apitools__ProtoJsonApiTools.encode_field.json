{"name": "google_apitools__ProtoJsonApiTools.encode_field", "language": "py", "prompt": "def encode_field(self, field, value):\n        \"\"\"Encode the given value as JSON.\n\n        Args:\n          field: a messages.Field for the new we're encoding.\n          value: a value for field.\n\n        Returns:\n          A value value suitable for json.dumps.\n        \"\"\"", "tests": "", "completions": ["\n        if field.type == messages.IntegerField:\n            return int(value)\n        elif field.type == messages.FloatField:\n            return float(value)\n        elif field.type == messages.BooleanField:\n            return bool(value)\n        elif field.type == messages.BytesField:\n            return base64.b64encode(value)\n        elif field.type == messages.StringField:\n            return unicode(value)\n        elif field.type == messages.EnumField:\n            return unicode(value)\n        elif field.type == messages.DateTimeField:\n            return time.mktime(value.timetuple())\n        elif field.type == messages.MessageField:\n            return value.to_dict()\n        else:\n            raise TypeError('No encoding for %s' % field.type)\n\n    def decode_field(self, field, value):\n        \"\"\"Decode the given value from JSON.\n\n        Args:\n          field: a messages.Field for the new we're decoding.\n          value: a value for field.\n\n        Returns:\n          A value value suitable for json.dumps.\n        \"\"\"\n        if field.type == messages.IntegerField:\n            return int(value)\n        elif field.type == messages.FloatField:\n            return float(value)\n        elif field.type == messages.BooleanField:\n            return bool(value)\n        elif field.type == messages.BytesField:\n            return base64.b64decode(value)\n        elif field.type == messages.StringField:\n            return unicode(value)\n        elif field.type == messages.EnumField:\n            return unicode(value)\n        elif field.type == messages.DateTimeField:\n            return datetime.datetime.fromtimestamp(value)\n        elif field.type == messages.MessageField:\n            # TODO: if this is a repeated message, just pass the whole thing.\n            return field.message_type(**value)\n        else:\n            raise TypeError('No decoding for %s' % field.type)\n\n    def to_json(self):\n        \"\"\"Encode the current message to JSON.\n\n        Returns:\n          A string containing the JSON representation of the message.\n        \"\"\"\n        return json.dumps(self.to_dict())\n\n    def to_dict(self):\n        \"\"\"Encode the current message to a dict.\n\n        Returns:\n          A dict mapping field names to values.\n        \"\"\"\n        return dict((field.name, self.encode_field(field, value))\n                    for field, value in self."], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}