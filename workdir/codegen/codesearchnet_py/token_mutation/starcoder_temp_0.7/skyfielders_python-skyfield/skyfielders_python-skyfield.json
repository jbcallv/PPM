{"name": "skyfielders_python-skyfield_from_polar", "language": "py", "prompt": "def from_polar(r, theta, phi):\n    \"\"\"Convert ``(r, theta, phi)`` to Cartesian coordinates ``[x y z]``.\n\n    ``r`` - vector length\n    ``theta`` - angle above (+) or below (-) the xy-plane\n    ``phi`` - angle around the z-axis\n\n    The number and order of the three polar parameters is designed to\n    match both ISO 31-11 and the traditional order used by physicists.\n    Mathematicians usually define ``theta`` and ``phi`` the other way\n    around, and may need to use them when calling this function.\n    See: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\n    \"\"\"", "tests": "", "completions": ["\n    x = r * np.cos(theta) * np.sin(phi)\n    y = r * np.sin(theta) * np.sin(phi)\n    z = r * np.cos(phi)\n    return np.array([x, y, z])\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}