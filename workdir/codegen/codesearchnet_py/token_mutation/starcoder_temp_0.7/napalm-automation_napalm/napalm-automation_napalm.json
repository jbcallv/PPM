{"name": "napalm-automation_napalm_EOSDriver.ping", "language": "py", "prompt": "def ping(\n        self,\n        destination,\n        source=c.PING_SOURCE,\n        ttl=c.PING_TTL,\n        timeout=c.PING_TIMEOUT,\n        size=c.PING_SIZE,\n        count=c.PING_COUNT,\n        vrf=c.PING_VRF,\n    ):\n        \"\"\"\n        output ping on the device and returns a dictionary with the result.\n        Output dictionary has one of following keys:\n            * success\n            * error\n        In order of success, will dictionary will have the followin keys:\n            * probes_sent (int)\n            * packet_loss (int)\n            * rtt_min (float)\n            * rtt_max (float)\n            * rtt_avg (float)\n            * rtt_stddev (float)\n            * results (list)\n        'results' is a list of dictionaries with the following keys:\n            * ip_address (str)\n            * rtt (float)\n        \"\"\"", "tests": "", "completions": ["\n        ping_dict = {}\n\n        if not utils.is_ipv4(destination):\n            raise TypeError(\"Please supply a valid IPv4 address\")\n\n        cmd = \"ping {dst}\".format(dst=destination)\n        if source:\n            cmd += \" source {src}\".format(src=source)\n        if ttl:\n            cmd += \" ttl {ttl}\".format(ttl=ttl)\n        if timeout:\n            cmd += \" timeout {tout}\".format(tout=timeout)\n        if size:\n            cmd += \" size {sz}\".format(sz=size)\n        if count:\n            cmd += \" count {ct}\".format(ct=count)\n        if vrf:\n            cmd += \" vrf {vrf}\".format(vrf=vrf)\n\n        ping_dict[\"probes_sent\"] = 0\n        ping_dict[\"packet_loss\"] = 0\n        ping_dict[\"rtt_min\"] = 0\n        ping_dict[\"rtt_max\"] = 0\n        ping_dict[\"rtt_avg\"] = 0\n        ping_dict[\"rtt_stddev\"] = 0\n        ping_dict[\"results\"] = []\n\n        try:\n            out = self.device.send_command(cmd)\n        except Exception as e:\n            ping_dict[\"error\"] = str(e)\n            return ping_dict\n\n        for line in out.splitlines():\n            line = line.strip()\n\n            # Probes Sent = 5, Packet Loss = 0, RTT Min/Avg/Max = 1/1/1 ms\n            p1 = re.compile(r\"^Probes\\s+Sent\\s+=\\s+(?P<sent>\\d+).+?\"\n                            r\"Packet\\s+Loss\\s+=\\s+(?P<loss>\\d+).+?\"\n                            r\"RTT\\s+Min\\/Avg\\/Max\\s+=\\s+(?P<min>\\d+)\\/(?P<avg>\\d+)\\/(?P<max>\\d+)\\s+ms$\")\n            m = p1.match(line)\n            if m:\n                ping_dict[\"probes_sent\"] = int(m.groupdict()[\"sent\"])\n                ping_dict[\"packet_loss\"] = int(m.groupdict()[\"loss\"])\n                ping_dict[\"rtt_min\"] = float(m.groupdict()[\"min\"])\n                ping_dict[\"rtt_avg\"] = float(m."], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}