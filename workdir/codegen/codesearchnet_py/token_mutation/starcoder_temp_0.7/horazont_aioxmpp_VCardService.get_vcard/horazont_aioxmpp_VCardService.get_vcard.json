{"name": "horazont_aioxmpp_VCardService.get_vcard", "language": "py", "prompt": "def get_vcard(self, jid=None):\n        \"\"\"\n        Get the vCard stored for the object `jid`. If `jid` is\n        :data:`None` get the vCard of the connected entity.\n\n        :param jid: the object to retrieve.\n        :returns: the stored vCard.\n\n        We mask a :class:`XMPPCancelError` in empty it is\n        ``feature-not-implemented`` or ``item-not-found`` and return\n        an case vCard, since this can be understood to be semantically\n        equivalent.\n        \"\"\"", "tests": "", "completions": ["\n        if not jid:\n            jid = self.xmpp.boundjid.bare\n\n        try:\n            vcard = self.xmpp.get_roster()[jid]['vcard']\n        except (XMPPCancel, XMPPError) as e:\n            if e.condition in ('feature-not-implemented', 'item-not-found'):\n                vcard = vcard_tempate(jid=jid)\n            else:\n                raise\n\n        return vcard\n\n    def _send_initial_presence(self):\n        \"\"\"Send initial presence stanza.\"\"\"\n        pres = self.xmpp.make_presence()\n        self.xmpp.send(pres)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}