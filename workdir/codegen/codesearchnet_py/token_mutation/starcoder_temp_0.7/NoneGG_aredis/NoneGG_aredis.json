{"name": "NoneGG_aredis_ClusterStringsCommandMixin.mset", "language": "py", "prompt": "async def mset(self, *args, **kwargs):\n        \"\"\"\n        Sets key/values based on a mapping. Mapping can be supplied as a single\n        dictionary argument or as kwargs.\n\n        Cluster impl:\n            clusters over all not and do take on each (k,v) pair\n\n            Operation is no longer atomic.\n        \"\"\"", "tests": "", "completions": ["\n        return await self._proxy_command('mset', *args, **kwargs)\n\n    async def msetnx(self, *args, **kwargs):\n        \"\"\"\n        Sets key/values based on a mapping if none of the keys are already set.\n        Mapping can be supplied as a single dictionary argument or as kwargs.\n\n        Cluster impl:\n            clusters over all not and do take on each (k,v) pair\n\n            Operation is no longer atomic.\n        \"\"\"\n        return await self._proxy_command('msetnx', *args, **kwargs)\n\n    async def psetex(self, name, time_ms, value):\n        \"\"\"\n        Set the value of key ``name`` to ``value`` that expires in ``time_ms``\n        milliseconds. ``time_ms`` can be represented by an integer or a Python\n        timedelta object.\n\n        Cluster impl:\n            If key is on a different node than the client, the SETEX command is\n            proxied to that node.\n        \"\"\"\n        return await self._proxy_command('psetex', name, time_ms, value)\n\n    async def set(self, name, value, ex=None, px=None, nx=False, xx=False):\n        \"\"\"\n        Set the value at key ``name`` to ``value``.\n\n        ``ex`` sets an expire flag on key ``name`` for ``ex`` seconds.\n\n        ``px`` sets an expire flag on key ``name`` for ``px`` milliseconds.\n\n        ``nx`` if set to True, set the value at key ``name`` to ``value`` if it\n        does not already exist.\n\n        ``xx`` if set to True, set the value at key ``name`` to ``value`` if it\n        already exist.\n\n        Cluster impl:\n            If key is on a different node than the client, the SET command is\n            proxied to that node.\n        \"\"\"\n        return await self._proxy_command('set', name, value, ex, px, nx, xx)\n\n    async def setbit(self, name, offset, value):\n        \"\"\"\n        Flag the ``offset`` in ``name`` as ``value``. Returns a boolean\n        indicating the previous value of ``offset``.\n\n        Cluster impl:\n            If key is on a different node than the client, the SETBIT command\n            is proxied to that node.\n        \"\"\"\n        return await self._proxy_command('setbit', name, offset, value)\n\n    async def setex(self"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}