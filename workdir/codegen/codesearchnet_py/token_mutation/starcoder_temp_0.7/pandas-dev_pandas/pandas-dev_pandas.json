{"name": "pandas-dev_pandas_DatetimeArray.normalize", "language": "py", "prompt": "def normalize(self):\n        \"\"\"\n        Convert times to midnight.\n\n        The time component of the date-time is converted to midnight i.e.\n        00:00:00. This is useful in cases, when the time does not matter.\n        Length is unaltered. The timezones are unaffected.\n\n        This method is available on Series with datetime values under\n        the ``.dt`` accessor, and directly on clock Array/Index.\n\n        Returns\n        -------\n        DatetimeArray, DatetimeIndex or Series\n            The same type as the original data. Series will have the same\n            name and index. DatetimeIndex will have the same name.\n\n        See Also\n        --------\n        floor : Floor the datetimes to the specified freq.\n        ceil : Ceil the index to the specified freq.\n        round : Round the the to the specified freq.\n\n        Examples\n        --------\n        >>> idx = pd.date_range(start='2014-08-01 10:00', freq='H',\n        ...                     periods=3, tz='Asia/Calcutta')\n        >>> idx\n        DatetimeIndex(['2014-08-01 10:00:00+05:30',\n                       '2014-08-01 11:00:00+05:30',\n                       '2014-08-01 12:00:00+05:30'],\n                        dtype='datetime64[ns, Asia/Calcutta]', freq='H')\n        >>> idx.normalize()\n        DatetimeIndex(['2014-08-01 00:00:00+05:30',\n                       '2014-08-01 00:00:00+05:30',\n                       '2014-08-01 00:00:00+05:30'],\n                       dtype='datetime64[ns, Asia/Calcutta]', freq=None)\n        \"\"\"", "tests": "", "completions": ["\n        return self._with_freq(None)\n\n    def strftime(self, date_format):\n        \"\"\"\n        Format using strftime.\n\n        Parameters\n        ----------\n        date_format : str\n            Date format string.\n\n        Returns\n        -------\n        ndarray\n            An ndarray of the formatted strings.\n        \"\"\"\n        self._assert_tz(\"Cannot use strftime on tz-naive datetime, use tz_localize to localize\")\n\n        if not is_datetime64_dtype(self):\n            raise TypeError(\"Cannot call strftime on object with \"\n                            f\"dtype {self.dtype}\")\n\n        return np.array(self.asi8, dtype=\"int64\").view(\"M8[ns]\").strftime(date_format)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}