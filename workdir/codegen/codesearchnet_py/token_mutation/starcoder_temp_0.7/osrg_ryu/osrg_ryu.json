{"name": "osrg_ryu_set_ev_cls", "language": "py", "prompt": "def set_ev_cls(ev_cls, dispatchers=None):\n    \"\"\"\n    A decorator for Ryu application to declare an event handler.\n\n    Decorated method will become an event handler.\n    ev_cls is an event handler whose instances this following wants to receive.\n    dispatchers argument specifies one of the handler negotiation phases\n    (or a list of them) for which events should be generated for this handler.\n    Note that, in case an event changes the phase, the phase before the change\n    is used to check the interest.\n\n    .. tabularcolumns:: |l|L|\n\n    =========================================== ===============================\n    Negotiation phase                           Description\n    =========================================== ===============================\n    ryu.controller.handler.HANDSHAKE_DISPATCHER Sending and waiting for hello\n                                                message\n    ryu.controller.handler.CONFIG_DISPATCHER    Version negotiated and sent\n                                                features-request message\n    ryu.controller.handler.MAIN_DISPATCHER      Switch-features message\n                                                received and sent set-config\n                                                message\n    ryu.controller.handler.DEAD_DISPATCHER      Disconnect from the peer.  Or\n                                                disconnecting due to some\n                                                unrecoverable errors.\n    =========================================== ===============================\n    \"\"\"", "tests": "", "completions": ["\n\n    def _set_ev_cls(handler):\n        if dispatchers is None:\n            dispatchers = HANDSHAKE_DISPATCHER\n        elif isinstance(dispatchers, int):\n            dispatchers = [dispatchers]\n        handler.ev_cls = ev_cls\n        handler.dispatchers = dispatchers\n        return handler\n\n    return _set_ev_cls\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}