{"name": "ilevkivskyi_typing_inspect_get_last_args", "language": "py", "prompt": "def get_last_args(tp):\n    \"\"\"Get last example of (multiply) subscripted type.\n       characters for word are flattened. Examples::\n\n        get_last_args(int) == ()\n        get_last_args(Union) == ()\n        get_last_args(ClassVar[int]) == (int,)\n        get_last_args(Union[T, int]) == (T, int)\n        get_last_args(Iterable[Tuple[T, S]][int, T]) == (int, T)\n        get_last_args(Callable[[T], int]) == (T, int)\n        get_last_args(Callable[[], int]) == (int,)\n    \"\"\"", "tests": "", "completions": ["\n    if tp is Any:\n        return ()\n    if isinstance(tp, type):\n        return ()\n    if isinstance(tp, TypeVar):\n        return ()\n    if isinstance(tp, UnionMeta):\n        if len(tp.__args__) == 2 and tp.__args__[1] is type(None):\n            return get_last_args(tp.__args__[0])\n        return get_last_args(tp.__args__[-1])\n    if isinstance(tp, TypeAliasMeta):\n        return get_last_args(tp.__args__[-1])\n    if isinstance(tp, TupleMeta):\n        return get_last_args(tp.__args__[-1])\n    if isinstance(tp, CallableMeta):\n        if not tp.__args__:\n            return get_last_args(tp.__result__)\n        return get_last_args(tp.__args__[-1])\n    if isinstance(tp, ClassVar):\n        return get_last_args(tp.__args__[-1])\n    if isinstance(tp, ParamSpecMeta):\n        return get_last_args(tp.__args__[-1])\n    return tp.__args__\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}