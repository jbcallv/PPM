{"name": "PSPC-SPAC-buyandsell_von_agent_encode", "language": "py", "prompt": "def encode(raw: Any) -> str:\n    \"\"\"\n    Encode the attribute value, leaving any (stringified) int32 alone: indy-sdk predicates\n    operate on int32 values properly only when their encoded values match their raw values.\n\n    To disambiguate for decoding, the operation reserves a sentinel for the null value and otherwise adds\n    2**31 to any non-trivial transform of a non-int32 input, then prepends a digit marking the input type:\n    * 1: string\n    * 2: boolean\n    * 3: non-32-bit integer\n    * 4: floating point\n    * 9: : (stringifiable)\n\n    :param raw: raw string to encode\n    :return: encoded value\n    \"\"\"", "tests": "", "completions": ["\n    if isinstance(raw, str):\n        return \"1\" + raw\n    if isinstance(raw, bool):\n        return \"2\" + str(raw).lower()\n    if isinstance(raw, int):\n        if raw < 0:\n            raise ValueError(\"cannot encode negative numbers\")\n        if raw < 2**31:\n            return \"3\" + str(raw)\n        return \"9\" + str(raw)\n    if isinstance(raw, float):\n        return \"4\" + str(raw)\n    if raw is None:\n        return \"0\"\n    raise TypeError(\"unknown type for value\")\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}