{"name": "ultrabug_py3status_Py3status._set_player", "language": "py", "prompt": "def _set_player(self):\n        \"\"\"\n        Sort the current players into priority order and set self._player\n        players are ordered by working state then are supplied by user\n        and finally by instance if a player has more than one running.\n        \"\"\"", "tests": "", "completions": ["\n        self._player = []\n\n        # First add the user supplied players\n        for player in self._players:\n            if player.is_alive():\n                self._player.append(player)\n\n        # Then add the players running with the instance\n        for instance in self._instances:\n            if instance.is_alive():\n                self._player.append(instance)\n\n        # Finally add any players which are running with the instance\n        for player in self._players:\n            if player.is_alive():\n                self._player.append(player)\n\n        # The player list is now sorted by priority\n        self._player = sorted(self._player, key=lambda x: x.priority)\n\n        # Raise error if there are no players left\n        if not self._player:\n            raise Exception('No players are running')\n\n    def _get_player(self):\n        \"\"\"\n        Get the next player in the priority list\n        \"\"\"\n        player = self._player.pop(0)\n        self._player.append(player)\n        return player\n\n    def _end_game(self):\n        \"\"\"\n        End the game and close any open instances\n        \"\"\"\n        for instance in self._instances:\n            instance.stop()\n        self._instances = []\n        self._player = []\n\n    def _add_instance(self, instance):\n        \"\"\"\n        Add a new instance to the list of instances\n        \"\"\"\n        self._instances.append(instance)\n\n    def _remove_instance(self, instance):\n        \"\"\"\n        Remove an instance from the list of instances\n        \"\"\"\n        self._instances.remove(instance)\n\n    def _add_player(self, player):\n        \"\"\"\n        Add a new player to the list of players\n        \"\"\"\n        self._players.append(player)\n\n    def _remove_player(self, player):\n        \"\"\"\n        Remove a player from the list of players\n        \"\"\"\n        self._players.remove(player)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}