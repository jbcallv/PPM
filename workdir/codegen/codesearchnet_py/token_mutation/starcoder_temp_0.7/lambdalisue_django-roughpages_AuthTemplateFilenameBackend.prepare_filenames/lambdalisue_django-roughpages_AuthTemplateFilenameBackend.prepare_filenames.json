{"name": "lambdalisue_django-roughpages_AuthTemplateFilenameBackend.prepare_filenames", "language": "py", "prompt": "def prepare_filenames(self, normalized_url, request):\n        \"\"\"\n        Prepare template ##s list based on the user authenticated state\n\n        If user is authenticated user, it use '_authenticated' as a suffix.\n        \" it use '_anonymous' as a suffix to produce the template\n        filename list. The list include original names at the end of the\n        list.\n\n        Args:\n            normalized_url (str): A normalized url\n            request (instance): An instance of HttpRequest\n\n        Returns:\n            list\n\n        Examples:\n            >>> from mock import MagicMock\n            >>> request = MagicMock()\n            >>> backend = AuthTemplateFilenameBackend()\n            >>> request.user.is_authenticated.return_value = True\n            >>> filenames = backend.prepare_filenames('foo/bar/hogehoge',\n            ...                                       request)\n            >>> assert filenames == [\n            ...     'foo/bar/hogehoge_authenticated.html',\n            ...     'foo/bar/hogehoge.html'\n            ... ]\n            >>> request.user.is_authenticated.return_value = False\n            >>> filenames = backend.prepare_filenames('foo/bar/hogehoge',\n            ...                                       request)\n            >>> assert filenames == [\n            ...     'foo/bar/hogehoge_anonymous.html',\n            ...     'foo/bar/hogehoge.html'\n            ... ]\n            >>> request.user.is_authenticated.return_value = True\n            >>> filenames = backend.prepare_filenames('',\n            ...                                       request)\n            >>> assert filenames == [\n            ...     'index_authenticated.html',\n            ...     'index.html'\n            ... ]\n            >>> request.user.is_authenticated.return_value = False\n            >>> filenames = backend.prepare_filenames('',\n            ...                                       request)\n            >>> assert filenames == [\n            ...     'index_anonymous.html',\n            ...     'index.html'\n            ... ]\n        \"\"\"", "tests": "", "completions": ["\n        if request.user.is_authenticated():\n            return [\n                os.path.join(normalized_url, filename)\n                for filename in self._filenames_authenticated\n            ]\n        else:\n            return [\n                os.path.join(normalized_url, filename)\n                for filename in self._filenames_anonymous\n            ]\n\n    def get_template_sources(self, template_name, template_dirs=None):\n        \"\"\"\n        Returns a list of paths to \"template_name\".\n\n        For security reasons, if a path doesn't lie inside one of the\n        template_dirs it is excluded from the result set.\n\n        Returns:\n            list\n\n        Examples:\n            >>> backend = AuthTemplateFilenameBackend()\n            >>> backend._filenames_authenticated = ['foo.html']\n            >>> backend._filenames_anonymous = ['bar.html']\n            >>> assert backend.get_template_sources(\n            >>>     'foo/bar/hogehoge', ['/foo/bar/hogehoge/']) == [\n            >>>         '/foo/bar/hogehoge/foo.html',\n            >>>         '/foo/bar/hogehoge/bar.html',\n            >>>     ]\n            >>> backend._filenames_authenticated = ['foo.html']\n            >>> backend._filenames_anonymous = ['bar.html']\n            >>> assert backend.get_template_sources(\n            >>>     'foo/bar/hogehoge', ['/foo/bar/hoge/hogehoge/']) == [\n            >>>         '/foo/bar/hoge/hogehoge/foo.html',\n            >>>         '/foo/bar/hoge/hogehoge/bar.html',\n            >>>     ]\n            >>> backend._filenames_authenticated = ['foo.html']\n            >>> backend._filenames_anonymous = ['bar.html']\n            >>> assert backend.get_template_sources(\n            >>>     'foo/bar/hogehoge', ['/foo/bar/hoge/hoge/']) == [\n            >>>         '/foo/bar/hoge/hoge/foo.html',\n            >>>         '/foo/bar/hoge/hoge/bar.html',\n            >>>     ]\n            >>> backend._filenames_authenticated = ['foo.html']\n            >>> backend._filenames_anonymous = ['bar.html']\n            >>> assert backend.get_template_sources(\n            >>>     'foo/bar/hogehoge"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}