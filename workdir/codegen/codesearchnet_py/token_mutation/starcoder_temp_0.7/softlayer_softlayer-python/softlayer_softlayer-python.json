{"name": "softlayer_softlayer-python_DedicatedHostManager.list_instances", "language": "py", "prompt": "def list_instances(self, tags=None, cpus=None, memory=None, hostname=None,\n                       disk=None, datacenter=None, **kwargs):\n        \"\"\"Retrieve a list of all the hosts on the account\n\n        :param list tags: filter based on filter of tags\n        :param integer cpus: number based on number of CPUS\n        :param integer memory: filter based on amount of memory\n        :param string hostname: filter based on hostname\n        :param string disk: filter based on disk\n        :param string datacenter: filter based on datacenter\n        :param dict \\\\*\\\\*kwargs: response-level options (mask, limit, etc.)\n        :returns: Returns a list of dictionaries representing the matching dedicated host.\n\n        \"\"\"", "tests": "", "completions": ["\n        params = {}\n        if tags:\n            params['tag_names'] = tags\n        if cpus:\n            params['cpus'] = cpus\n        if memory:\n            params['memory'] = memory\n        if hostname:\n            params['hostname'] = hostname\n        if disk:\n            params['disk'] = disk\n        if datacenter:\n            params['datacenter'] = datacenter\n        return self.connection.request('/dedicated_hosts', params=params).object\n\n    def reboot_instance(self, node):\n        \"\"\"\n        Reboot the specified Dedicated Instance\n\n        :param node: The node (dedicated instance) to be rebooted\n        :type node: :class:`.Node`\n\n        :rtype: bool\n        \"\"\"\n        params = {'id': node.id}\n\n        return self.connection.request('/dedicated_hosts/%s/reboot' % node.id,\n                                        params=params,\n                                        method='POST')\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}