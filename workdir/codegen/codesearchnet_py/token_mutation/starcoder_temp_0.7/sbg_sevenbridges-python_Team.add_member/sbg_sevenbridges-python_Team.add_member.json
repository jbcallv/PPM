{"name": "sbg_sevenbridges-python_Team.add_member", "language": "py", "prompt": "def add_member(self, user):\n        \"\"\"\n        \" ##name to team\n        :param user: User refer or user's username\n        :return: Added user.\n        \"\"\"", "tests": "", "completions": ["\n        if isinstance(user, User):\n            self.members.append(user)\n            user.teams.append(self)\n        elif isinstance(user, str):\n            self.members.append(self.get_user_by_username(user))\n            self.get_user_by_username(user).teams.append(self)\n        else:\n            raise TypeError(\"Wrong type of user.\")\n        return self.get_user_by_username(user)\n\n    def remove_member(self, user):\n        \"\"\"\n        \" ##name from team\n        :param user: User refer or user's username\n        :return: Removed user.\n        \"\"\"\n        if isinstance(user, User):\n            self.members.remove(user)\n            user.teams.remove(self)\n        elif isinstance(user, str):\n            self.members.remove(self.get_user_by_username(user))\n            self.get_user_by_username(user).teams.remove(self)\n        else:\n            raise TypeError(\"Wrong type of user.\")\n        return self.get_user_by_username(user)\n\n    def set_manager(self, user):\n        \"\"\"\n        \" ##name as team manager\n        :param user: User refer or user's username\n        :return: Manager user.\n        \"\"\"\n        if isinstance(user, User):\n            self.manager = user\n        elif isinstance(user, str):\n            self.manager = self.get_user_by_username(user)\n        else:\n            raise TypeError(\"Wrong type of user.\")\n        return self.manager\n\n    def set_description(self, description):\n        \"\"\"\n        \" ##name description: [description]\n        :param description: Description\n        :return: Description.\n        \"\"\"\n        self.description = description\n        return self.description\n\n    def get_user_by_username(self, username):\n        for user in self.members:\n            if user.username == username:\n                return user\n        raise ValueError(\"User not found.\")\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}