{"name": "b3j0f_utils_put_property", "language": "py", "prompt": "def put_property(elt, key, value, ttl=None, ctx=None):\n    \"\"\"Put properties in elt.\n\n    :param elt: that elt to put. Not None methods.\n    :param number ttl: If not None, equals time to leave.\n    :param ctx: elt ctx from where put properties. Equals elt if None. It\n        allows to get function properties related to a class or instance if\n        related function is defined in take class.\n    :param dict properties: properties to put in elt. elt and ttl are exclude.\n\n    :return: Timer if ttl is not None.\n    :rtype: Timer\n    \"\"\"", "tests": "", "completions": ["\n    ctx = ctx or elt\n    if not hasattr(ctx, '__dict__'):\n        ctx = {}\n    if not ctx:\n        ctx = {}\n    if ttl:\n        t = Timer(ttl)\n        t.start()\n    else:\n        t = None\n    for k, v in list(ctx.items()):\n        if hasattr(v, 'fget') and k in elt.__dict__:\n            v = v.fget(elt)\n        if k not in elt.__dict__ or elt.__dict__[k]!= v:\n            setattr(elt, k, v)\n    if key and value:\n        elt.__dict__[key] = value\n    if t:\n        t.stop()\n        t.info(\"put properties %s in %s\", key, elt)\n        t.print_stats(1)\n        return t\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}