{"name": "manns_pyspread_libvlc_media_new_callbacks", "language": "py", "prompt": "def libvlc_media_new_callbacks(instance, open_cb, read_cb, seek_cb, close_cb, opaque):\n    '''Create a media with custom callbacks to read the data from.\n    @param instance: LibVLC instance.\n    @param open_cb: callback to open the custom ##ised input media.\n    @param read_cb: callback to read data (must not be NULL).\n    @param seek_cb: callback to seek, or NULL if seeking is not supported.\n    @param close_cb: callback to close the media, or NULL if unnecessary.\n    @param opaque: data pointer for the open callback.\n    @return: the newly created media or NULL on data @note If open_cb is NULL, the opaque . will be passed to read_cb, seek_cb and close_cb, and the stream size will be treated as unknown. @note The callbacks may be called asynchronously (from another thread). A single stream instance need not be reentrant. However the open_cb needs to be reentrant if the media is used by multiple player instances. @warning The callbacks may be used until all or any player instances that were supplied the media item are stopped. See L{libvlc_media_release}.\n    @version: LibVLC 3.0.0 and later.\n    '''\n    f = _Cfunctions.get('libvlc_media_new_callbacks', None) or \\\n        _Cfunction('libvlc_media_new_callbacks', ((1,), (1,), (1,), (1,), (1,), (1,),), class_result(Media),\n                    ctypes.c_void_p, Instance, MediaOpenCb, MediaReadCb, MediaSeekCb, MediaCloseCb, ctypes.c_void_p)\n    return f(instance, open_cb, read_cb, seek_cb, close_cb, opaque)", "tests": "", "completions": ["\n\n__all__ = ['Media', 'MediaTrackInfo', 'MediaSlave', 'MediaDiscoverer',\n           'libvlc_media_new_location', 'libvlc_media_new_path',\n           'libvlc_media_new_as_node', 'libvlc_media_add_option',\n           'libvlc_media_retain', 'libvlc_media_release',\n           'libvlc_media_get_mrl', 'libvlc_media_duplicate',\n           'libvlc_media_get_meta', 'libvlc_media_set_meta',\n           'libvlc_media_save_meta', 'libvlc_media_get_state',\n           'libvlc_media_subitems', 'libvlc_media_event_manager',\n           'libvlc_media_get_duration', 'libvlc_media_parse',\n           'libvlc_media_is_parsed', 'libvlc_media_get_tracks_info',\n           'libvlc_media_get_codec_description', 'libvlc_media_tracks_get',\n           'libvlc_media_get_meta', 'libvlc_media_set_meta',\n           'libvlc_media_save_meta', 'libvlc_media_player_new_from_media',\n           'libvlc_media_slaves_add', 'libvlc_media_slaves_clear',\n           'libvlc_media_slaves_get', 'libvlc_media_slaves_get_length',\n           'libvlc_media_player_release', 'libvlc_media_player_retain',\n           'libvlc_media_player_set_media', 'libvlc_media_player_get_media',\n           'libvlc_media_player_event_manager',\n           'libvlc_media_player_is_playing',\n           'libvlc_media_player_play', 'libvlc_media_player_set_pause',\n           'libvlc_media_player_pause', 'libvlc_media_player_stop',\n           'libvlc_media_player_set_renderer', 'libvlc_media_player_set_nsobject',\n           'libv"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}