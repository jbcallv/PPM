{"name": "spencerahill_aospy_Region.ts", "language": "py", "prompt": "def ts(self, data, lon_cyclic=True, lon_str=LON_STR, lat_str=LAT_STR,\n           land_mask_str=LAND_MASK_STR, sfc_area_str=SFC_AREA_STR):\n        \"\"\"Create yearly time-series of region-averaged data.\n\n        Parameters\n        ----------\n        data : xarray.DataArray\n            The array to create the regional timeseries of\n        lon_cyclic : { None, True, False }, optional (default True)\n            Whether or not the longitudes of ``data`` span the whole globe,\n            meaning that they should be wrapped around as necessary to cover\n            the Region's full width.\n        lat_str, lon_str, land_mask_str, sfc_area_str : str, optional\n            The set of the latitude, longitude, land mask, and surface area\n            coordinates, respectively, in ``data``.  Defaults are the\n            corresponding values in ``aospy.internal_names``.\n\n        Returns\n        -------\n        xarray.DataArray\n            The values of values averaged within the region and within each\n            year, one value per year.\n\n        \"\"\"", "tests": "", "completions": ["\n        # Mask the data and create the annual average.\n        ts_data = self.mask_data(data, lon_str=lon_str, lat_str=lat_str,\n                                 land_mask_str=land_mask_str,\n                                 sfc_area_str=sfc_area_str).annual_avg()\n\n        # If necessary, wrap the longitudes so that they span the full region.\n        if lon_cyclic:\n            ts_data = wrap_lon(ts_data, lon_str=lon_str)\n\n        return ts_data\n\n    def mask_data(self, data, lon_str=LON_STR, lat_str=LAT_STR,\n                  land_mask_str=LAND_MASK_STR, sfc_area_str=SFC_AREA_STR):\n        \"\"\"Mask a data array according to the region's shape.\n\n        Parameters\n        ----------\n        data : xarray.DataArray\n            The array to mask\n        lon_str, lat_str, land_mask_str, sfc_area_str : str, optional\n            The set of the latitude, longitude, land mask, and surface area\n            coordinates, respectively, in ``data``.  Defaults are the\n            corresponding values in ``aospy.internal_names``.\n\n        Returns\n        -------\n        xarray.DataArray\n            The masked array\n\n        \"\"\"\n        if not self.is_rectilinear:\n            raise ValueError(\n                'Unable to mask data for non-rectilinear region.')\n\n        return mask_region(data, self.vertices, self.mask_3d,\n                           lon_str=lon_str, lat_str=lat_str,\n                           land_mask_str=land_mask_str,\n                           sfc_area_str=sfc_area_str)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}