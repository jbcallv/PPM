{"name": "thautwarm_Redy_map_by", "language": "py", "prompt": "def map_by(fn: Callable[[T1], T2]) -> Callable[[ActualIterable[T1]], Iterable[T2]]:\n    \"\"\"\n    when , supports it hinting for any kind of currying,\n    map_with and map_on would be deprecated.\n    >>> from Redy.Collections import Traversal, Flow\n    >>> def double(x: int) -> int: return x * 2\n    >>> lst: Iterable[int] = [1, 2, 3]\n    >>> x = Flow(lst)[Traversal.map_by(double)][Traversal.sum_from(0)].unbox\n    >>> assert x is 12\n    now you can get the hinting that `x` is of type `int`\n    \"\"\"", "tests": "", "completions": ["\n\n    def _(xs: Iterable[T1]) -> Iterable[T2]:\n        return map(fn, xs)\n\n    return _\n\n\n__all__ = [\n    'Traversal',\n    'TraversalError',\n    'map_by',\n    'flat_map_by',\n    'flat_map',\n    'flatten',\n    'flatten_by',\n]\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}