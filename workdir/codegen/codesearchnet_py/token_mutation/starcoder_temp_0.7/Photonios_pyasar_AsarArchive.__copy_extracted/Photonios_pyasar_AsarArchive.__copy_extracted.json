{"name": "Photonios_pyasar_AsarArchive.__copy_extracted", "language": "py", "prompt": "def __copy_extracted(self, path, destination):\n        \"\"\"Copies a file that was already extracted to the destination directory.\n\n        Args:\n            path (str):\n                Relative (to the end of the archive) of the file to copy.\n\n            path (str):\n                path to extract the archive to.\n        \"\"\"", "tests": "", "completions": ["\n        destination = os.path.join(destination, os.path.dirname(path))\n        ensure_dir_exists(destination)\n        shutil.copy(os.path.join(self._extract_dir, path), destination)\n\n    def __get_extracted_path(self, path):\n        \"\"\"Returns the path to a file that was already extracted.\n\n        Args:\n            path (str):\n                Relative (to the end of the archive) of the file to get the path\n                for.\n        \"\"\"\n        return os.path.join(self._extract_dir, path)\n\n    def __remove_extracted(self, path):\n        \"\"\"Removes a file that was already extracted.\n\n        Args:\n            path (str):\n                Relative (to the end of the archive) of the file to remove.\n        \"\"\"\n        remove_file(self.__get_extracted_path(path))\n\n    def __get_extracted_paths(self, path, recursive=False):\n        \"\"\"Returns a list of paths to all the files under a directory that\n        were already extracted.\n\n        Args:\n            path (str):\n                Relative (to the end of the archive) of the directory to list\n                the contents of.\n\n            recursive (bool):\n                Whether to list the contents of all subdirectories as well.\n        \"\"\"\n        return glob.glob(os.path.join(self._extract_dir, path, '**'),\n                         recursive=recursive)\n\n    def __remove_extracted_dir(self, path):\n        \"\"\"Removes a directory and all of it's contents that was already\n        extracted.\n\n        Args:\n            path (str):\n                Relative (to the end of the archive) of the directory to remove.\n        \"\"\"\n        remove_dir(self.__get_extracted_path(path))\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}