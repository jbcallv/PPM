{"name": "mdiener_grace_Parser.p_if_statement_1", "language": "py", "prompt": "def p_if_statement_1(self, p):\n        \"\"\"if_statement : \" \" expr ##iated statement\"\"\"", "tests": "", "completions": ["\n        p[0] = If(p[2], p[4])\n\n    def p_if_statement_2(self, p):\n        \"\"\"if_statement : \" \" expr ##iated\"\"\"\n        p[0] = If(p[2], None)\n\n    def p_while_statement(self, p):\n        \"\"\"while_statement : \" \" \"while\" \"(\" expr \")\" \"{\" statements \"}\" \"\"\"\n        p[0] = While(p[4], p[7])\n\n    def p_for_statement(self, p):\n        \"\"\"for_statement : \" \" \"for\" \"(\" \" \" expr \";\" \" \" expr \";\" \" \" expr \" \" \")\" \"{\" statements \"}\" \"\"\"\n        p[0] = For(p[6], p[8], p[10], p[13])\n\n    def p_break_statement(self, p):\n        \"\"\"break_statement : \" \" \"break\" \"\"\"\n        p[0] = Break()\n\n    def p_continue_statement(self, p):\n        \"\"\"continue_statement : \" \" \"continue\" \"\"\"\n        p[0] = Continue()\n\n    def p_return_statement(self, p):\n        \"\"\"return_statement : \" \" \"return\" \"\"\"\n        p[0] = Return(None)\n\n    def p_return_statement_1(self, p):\n        \"\"\"return_statement : \" \" \"return\" expr \"\"\"\n        p[0] = Return(p[2])\n\n    def p_expr_list(self, p):\n        \"\"\"expr_list : expr \",\" expr_list \"\"\"\n        p[0] = [p[1]] + p[3]\n\n    def p_expr_list_1(self, p):\n        \"\"\"expr_list : expr \"\"\"\n        p[0] = [p[1]]\n\n    def p_expr_list_2(self, p):\n        \"\"\"expr_list : empty \"\"\"\n        p[0] = []\n\n    def p_expr_list_3(self, p):\n        \"\"\"expr_list : expr \",\" \"\"\"\n        p[0] = [p[1]]\n\n    def p_func_call(self, p):\n        \"\"\"func_call : \" \" IDENT \"(\" expr_list \")\" \"\"\"\n        p[0] = FunctionCall(p[2], p[4])\n\n    def p_func_call_1(self, p):\n        \"\"\"func_call :"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}