{"name": "honzajavorek_redis-collections_Set.intersection_update", "language": "py", "prompt": "def intersection_update(self, *others):\n        \"\"\"\n        is the set, keeping only elements found in it and all *others*.\n\n        :param others: Iterables, each one as a single positional argument.\n        :rtype: None\n\n        .. note::\n            The same rule as at :func:`difference_update` applies.\n        \"\"\"", "tests": "", "completions": ["\n        for other in others:\n            for item in other:\n                if item in self:\n                    self.remove(item)\n\n    def symmetric_difference_update(self, other):\n        \"\"\"\n        is the set, keeping only elements found in either set, but not in both.\n\n        :param other: Iterable, each one as a single positional argument.\n        :rtype: None\n\n        .. note::\n            The same rule as at :func:`difference_update` applies.\n        \"\"\"\n        for item in other:\n            if item in self:\n                self.remove(item)\n            else:\n                self.add(item)\n\n    def update(self, *others):\n        \"\"\"\n        update a set with the union of itself and others.\n\n        :param others: Iterables, each one as a single positional argument.\n        :rtype: None\n        \"\"\"\n        for other in others:\n            self |= other\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}