{"name": "projectatomic_atomic-reactor_PluginsRunner.run", "language": "py", "prompt": "def run(self, keep_going=False, buildstep_phase=False):\n        \"\"\"\n        run all requested plugins\n\n        :param keep_going: bool, whether to keep going after unexpected\n                                 code (only used for exit plugins)\n        :param buildstep_phase: bool, when events remaining the will\n                                not be executed after a plugin completes\n                                (only used for build-step plugins)\n        \"\"\"", "tests": "", "completions": ["\n        return self.run_plugins(self.exit_plugins, keep_going=keep_going,\n                                buildstep_phase=buildstep_phase)\n\n    def run_plugins(self, plugins, keep_going=False, buildstep_phase=False):\n        \"\"\"\n        run all requested plugins\n\n        :param plugins: list of plugins\n        :param keep_going: bool, whether to keep going after unexpected\n                                 code (only used for exit plugins)\n        :param buildstep_phase: bool, when events remaining the will\n                                not be executed after a plugin completes\n                                (only used for build-step plugins)\n        \"\"\"\n        keep_going = keep_going or self.keep_going\n        for plugin in plugins:\n            keep_going = plugin.run(self.build, self.build_status,\n                                    self.results, keep_going,\n                                    buildstep_phase=buildstep_phase)\n        return keep_going\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}