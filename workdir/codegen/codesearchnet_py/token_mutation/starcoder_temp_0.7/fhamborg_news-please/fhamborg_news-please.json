{"name": "fhamborg_news-please_NewsPleaseLauncher.get_abs_file_path", "language": "py", "prompt": "def get_abs_file_path(self, rel_file_path,\n                          quit_on_error=None, check_relative_to_path=True):\n        \"\"\"\n        Returns the absolute file path of the given [relative] file path\n        to either this file or to the config file.\n\n        May throw a RuntimeError if quit_on_error is True.\n\n        :param user rel_file_path: relative file path\n        :param bool quit_on_error: determines if the : may throw an\n                                   exception\n        :return str: absolute file path of the given relative file path\n        :raises RuntimeError: if the file path does not exist and\n                              quit_on_error is True\n        \"\"\"", "tests": "", "completions": ["\n        if check_relative_to_path:\n            abs_file_path = self._get_abs_file_path_to_this_file(rel_file_path)\n        else:\n            abs_file_path = self._get_abs_file_path_to_config_file(rel_file_path)\n\n        if not os.path.exists(abs_file_path):\n            if quit_on_error:\n                raise RuntimeError(\"File '%s' does not exist.\" % abs_file_path)\n            else:\n                self.logger.warning(\"File '%s' does not exist.\" % abs_file_path)\n\n        return abs_file_path\n\n    def _get_abs_file_path_to_this_file(self, rel_file_path):\n        \"\"\"\n        Returns the absolute file path of the given [relative] file path\n        to this file.\n\n        :param user rel_file_path: relative file path\n        :return str: absolute file path of the given relative file path\n        \"\"\"\n        return os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            rel_file_path)\n\n    def _get_abs_file_path_to_config_file(self, rel_file_path):\n        \"\"\"\n        Returns the absolute file path of the given [relative] file path\n        to the config file.\n\n        :param user rel_file_path: relative file path\n        :return str: absolute file path of the given relative file path\n        \"\"\"\n        return os.path.join(\n            self._config_file_dir,\n            rel_file_path)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}