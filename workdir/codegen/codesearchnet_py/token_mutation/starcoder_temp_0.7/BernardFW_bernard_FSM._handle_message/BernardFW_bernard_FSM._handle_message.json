{"name": "BernardFW_bernard_FSM._handle_message", "language": "py", "prompt": "async def _handle_message(self,\n                              message: BaseMessage,\n                              responder: Responder) -> Optional[Dict]:\n        \"\"\"\n        Handles a message: find a message and run it.\n\n        :return: The message that was saved\n        \"\"\"", "tests": "", "completions": ["\n        handler_class = self.handlers.get(message.performative)\n        if handler_class:\n            handler = handler_class(message=message, responder=responder)\n            return await handler.handle()\n        return None\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}