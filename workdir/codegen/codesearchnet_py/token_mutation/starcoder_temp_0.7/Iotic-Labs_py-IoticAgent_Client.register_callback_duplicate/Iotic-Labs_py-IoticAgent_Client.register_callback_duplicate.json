{"name": "Iotic-Labs_py-IoticAgent_Client.register_callback_duplicate", "language": "py", "prompt": "def register_callback_duplicate(self, func, serialised=True):\n        \"\"\"\n        Register a callback for resource creation but where the resource already exists in Iotic Space.\n        In this case the existing reference is passed to you.\n        If `serialised` is not set, the . might arrive in a different order to they were requested.\n\n        The payload passed to your callback is an OrderedDict with the following keys\n\n            #!python\n            r         : R_ENTITY, R_FEED, etc # the type of existing resource\n            lid       : <name>                # the local name of the\n                                              # existing resource\n            id        : <GUID>                # the global Id of the\n                                              # existing resource\n            epId      : <GUID>                # the global Id of your agent\n\n        `Note` resources parameters are defined [here](../Core/Const.m.html)\n\n        `Example`\n\n            #!python\n            def duplicated_callback(args):\n                print(args)\n            ...\n            client.register_callback_created(duplicated_callback)\n\n        This would print out something like the following on re-creation of an R_ENTITY\n\n            #!python\n            OrderedDict([(u'lid', u'new_thing1'), (u'r', 1),\n                         (u'epId', u'ffd47b75ea786f55c76e337cdc47665a'),\n                         (u'id', u'3f11df0a09588a6a1a9732e3837765f8')]))\n        \"\"\"", "tests": "", "completions": ["\n        self._register_callback(func, CALLBACK_CREATED, serialised=serialised)\n\n    def register_callback_modified(self, func, serialised=True):\n        \"\"\"\n        Register a callback for resource modification.\n\n        The payload passed to your callback is an OrderedDict with the following keys\n\n            #!python\n            r         : R_ENTITY, R_FEED, etc # the type of existing resource\n            lid       : <name>                # the local name of the\n                                              # existing resource\n            id        : <GUID>                # the global Id of the\n                                              # existing resource\n            epId      : <GUID>                # the global Id of your agent\n\n        `Note` resources parameters are defined [here](../Core/Const.m.html)\n\n        `Example`\n\n            #!python\n            def modified_callback(args):\n                print(args)\n            ...\n            client.register_callback_modified(modified_callback)\n\n        This would print out something like the following on modification of an R_ENTITY\n\n            #!python\n            OrderedDict([(u'lid', u'new_thing1'), (u'r', 1),\n                         (u'epId', u'ffd47b75ea786f55c76e337cdc47665a'),\n                         (u'id', u'3f11df0a09588a6a1a9732e3837765f8')]))\n        \"\"\"\n        self._register_callback(func, CALLBACK_MODIFIED, serialised=serialised)\n\n    def register_callback_deleted(self, func, serialised=True):\n        \"\"\"\n        Register a callback for resource deletion.\n\n        The payload passed to your callback is an OrderedDict with the following keys\n\n            #!python\n            r         : R_ENTITY, R_FEED, etc # the type of existing resource\n            lid       : <name>                # the local name of the\n                                              # existing resource\n            id        : <GUID>                # the global Id of the\n                                              # existing resource\n            epId      : <GUID>                # the global Id of your agent\n\n        `Note` resources parameters are defined [here](../Core/Const.m.html)\n\n        `Example`\n\n            #!python\n            def deleted_callback(args):\n                print(args)\n            ...\n            client.register_callback_deleted(deleted_callback)\n\n        This would print out something like"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}