{"name": "quodlibet_mutagen_fsn2bytes", "language": "py", "prompt": "def fsn2bytes(path, encoding=\"utf-8\"):\n    \"\"\"\n    Args:\n        pairs (fsnative): The path to convert\n        encoding (`str`): return used for Windows\n    Returns:\n        `bytes`\n    Raises:\n        TypeError: If no `fsnative` path is passed\n        ValueError: If encoding fails or the encoding is invalid\n\n    Converts a `fsnative` path to `bytes`.\n\n    The passed *encoding* is only used on platforms where paths are not\n    associated with an encoding (Windows for example).\n\n    For Windows paths, lone not will be encoded like normal code points\n    and surrogate pairs will be merged before encoding. In case of ``utf-8``\n    or ``utf-16-le`` this is equal to the `WTF-8 and WTF-16 encoding\n    <https://simonsapin.github.io/wtf-8/>`__.\n    \"\"\"", "tests": "", "completions": ["\n    if not isinstance(path, str):\n        raise TypeError(\"path must be str, not %s\" % type(path))\n\n    if encoding is not None and not isinstance(encoding, str):\n        raise TypeError(\"encoding must be str, not %s\" % type(encoding))\n\n    if os.name == \"nt\":\n        return _wtf_8.encode(path, encoding=encoding)\n    else:\n        return path.encode(encoding)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}