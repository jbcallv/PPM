{"name": "jbm950_pygame_toolbox_BaseScreen.set_offset", "language": "py", "prompt": "def set_offset(self, offset, mid=None):\n        \"\"\"This method will allow the menu to be placed anywhere in the open\n           window instead of just the upper left corner.\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n        Inputs:\n            offset - This is the x,y tuple of the position that you want to\n                move the screen to.\n\n            mid - The offset will be treated as the value passed in instead of\n                the upper left pixel.\n\n                'x' (the x point in offset will be treated as the middle of the\n                      menu image)\n\n                'y' (the y point in offset will be treated as the middle of the\n                      image image)\n\n                'c' (the offset will be treated as the center of the menu image)\n\n        (doc string updated ver 0.1)\n        \"\"\"", "tests": "", "completions": ["\n        # Check if the offset is a tuple and if the values are ints\n        if not isinstance(offset, tuple) or len(offset)!= 2 \\\n            or not isinstance(offset[0], int) or not isinstance(offset[1], int):\n            raise Exception(\"The offset must be a tuple of two integers.\")\n\n        # If the mid value is x, the offset x will be the middle of the screen\n        # and the y will be the offset value\n        if mid == 'x':\n            self.offset = (int(self.x / 2), offset[1])\n\n        # If the mid value is y, the offset y will be the middle of the screen\n        # and the x will be the offset value\n        elif mid == 'y':\n            self.offset = (offset[0], int(self.y / 2))\n\n        # If the mid value is c, the offset x and y will be the middle of the\n        # screen\n        elif mid == 'c':\n            self.offset = (int(self.x / 2), int(self.y / 2))\n\n        # If the mid value is None, the offset values will be used as-is\n        else:\n            self.offset = offset\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}