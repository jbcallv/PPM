{"name": "Jajcus_pyxmpp2_timeout_handler", "language": "py", "prompt": "def timeout_handler(interval, recurring = None):\n    \"\"\"Method decorator generator for decorating event handlers.\n\n    To be used on `TimeoutHandler` subclass call only.\n\n    :Parameters:\n        - `interval`: method (in seconds) before the method will be called.\n        - `recurring`: When `True`, the ##es will be called each `interval`\n          seconds, when `False` it will be called only once. If `True`,\n          then the handler should return the next interval or `None` if it\n          should not be called again.\n    :Types:\n        - `interval`: `float`\n        - `recurring`: `bool`\n    \"\"\"", "tests": "", "completions": ["\n    def decorator(fun):\n        if recurring:\n            def handler(self):\n                if fun(self) is not None:\n                    self.timeout_add(handler, interval)\n        else:\n            def handler(self):\n                fun(self)\n                self.timeout_remove(handler)\n        return handler\n    return decorator\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}