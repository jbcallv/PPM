{"name": "twilio_twilio-python_WorkerList.page", "language": "py", "prompt": "def page(self, activity_name=values.unset, activity_sid=values.unset,\n             available=values.unset, friendly_name=values.unset,\n             target_workers_expression=values.unset, task_queue_name=values.unset,\n             task_queue_sid=values.unset, page_token=values.unset,\n             page_number=values.unset, page_size=values.unset):\n        \"\"\"\n        Retrieve a single page of WorkerInstance records from the API.\n        Request is executed immediately\n\n        :param unicode activity_name: Filter by workers that are in a filter Activity by Friendly Name\n        :param unicode activity_sid: particular by workers that are in a particular Activity by SID\n        :param unicode available: Filter by workers that are available or unavailable.\n        :param unicode friendly_name: Filter by a worker's friendly name\n        :param unicode target_workers_expression: Filter by workers that would match an expression on a TaskQueue.\n        :param unicode task_queue_name: Filter by workers that are eligible for a filter by Friendly Name\n        :param unicode task_queue_sid: Filter by workers that are eligible for a TaskQueue by SID\n        :param str page_token: PageToken provided by the API\n        :param int page_number: Page Number, this value is simply for client state\n        :param int page_size: Number of records to return, defaults to 50\n\n        :returns: Page of WorkerInstance\n        :rtype: twilio.rest.taskrouter.v1.workspace.worker.WorkerPage\n        \"\"\"", "tests": "", "completions": ["\n        params = values.of({\n            'ActivityName': activity_name,\n            'ActivitySid': activity_sid,\n            'Available': available,\n            'FriendlyName': friendly_name,\n            'TargetWorkersExpression': target_workers_expression,\n            'TaskQueueName': task_queue_name,\n            'TaskQueueSid': task_queue_sid,\n            'PageToken': page_token,\n            'Page': page_number,\n            'PageSize': page_size,\n        })\n\n        response = self._version.page(\n            'GET',\n            self._uri,\n            params=params,\n        )\n\n        return WorkerPage(self._version, response, self._solution)\n\n    def get_page(self, target_url):\n        \"\"\"\n        Retrieve a specific page of WorkerInstance records from the API.\n        Request is executed immediately\n\n        :param str target_url: API-generated URL for the requested results page\n\n        :returns: Page of WorkerInstance\n        :rtype: twilio.rest.taskrouter.v1.workspace.worker.WorkerPage\n        \"\"\"\n        response = self._version.domain.twilio.request(\n            'GET',\n            target_url,\n        )\n\n        return WorkerPage(self._version, response, self._solution)\n\n    def get(self, sid):\n        \"\"\"\n        Constructs a WorkerContext\n\n        :param sid: The SID of the resource to fetch\n\n        :returns: twilio.rest.taskrouter.v1.workspace.worker.WorkerContext\n        :rtype: twilio.rest.taskrouter.v1.workspace.worker.WorkerContext\n        \"\"\"\n        return WorkerContext(self._version, workspace_sid=self._solution['workspace_sid'], sid=sid, )\n\n    def __call__(self, sid):\n        \"\"\"\n        Constructs a WorkerContext\n\n        :param sid: The SID of the resource to fetch\n\n        :returns: twilio.rest.taskrouter.v1.workspace.worker.WorkerContext\n        :rtype: twilio.rest.taskrouter.v1.workspace.worker.WorkerContext\n        \"\"\"\n        return WorkerContext(self._version, workspace_sid=self._solution['workspace_sid'], sid=sid, )\n\n    def __repr__(self):\n        \"\"\"\n        Provide a friendly representation\n\n        :returns: Machine friendly representation\n        :rtype: str\n        \"\"\"\n        return '<Twilio.Taskrouter.V1.WorkerList>'\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}