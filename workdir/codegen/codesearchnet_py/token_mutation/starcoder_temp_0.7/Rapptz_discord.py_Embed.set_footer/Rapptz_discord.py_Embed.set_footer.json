{"name": "Rapptz_discord.py_Embed.set_footer", "language": "py", "prompt": "def set_footer(self, *, text=EmptyEmbed, icon_url=EmptyEmbed):\n        \"\"\"Sets the name for the embed content.\n\n        This function returns the class parameters to allow for fluent-style\n        chaining.\n\n        Parameters\n        -----------\n        text: :class:`str`\n            The footer text.\n        icon_url: :class:`str`\n            The URL of the user icon. Only HTTP(S) is supported.\n        \"\"\"", "tests": "", "completions": ["\n        if text is not EmptyEmbed:\n            self._footer['text'] = str(text)\n        if icon_url is not EmptyEmbed:\n            self._footer['icon_url'] = str(icon_url)\n        return self\n\n    def set_image(self, *, url=EmptyEmbed):\n        \"\"\"Sets the image for the embed content.\n\n        This function returns the class parameters to allow for fluent-style\n        chaining.\n\n        Parameters\n        -----------\n        url: :class:`str`\n            The URL of the image. Only HTTP(S) is supported.\n        \"\"\"\n        if url is not EmptyEmbed:\n            self._image['url'] = str(url)\n        return self\n\n    def set_thumbnail(self, *, url=EmptyEmbed):\n        \"\"\"Sets the thumbnail for the embed content.\n\n        This function returns the class parameters to allow for fluent-style\n        chaining.\n\n        Parameters\n        -----------\n        url: :class:`str`\n            The URL of the thumbnail. Only HTTP(S) is supported.\n        \"\"\"\n        if url is not EmptyEmbed:\n            self._thumbnail['url'] = str(url)\n        return self\n\n    def set_author(self, *, name=EmptyEmbed, url=EmptyEmbed, icon_url=EmptyEmbed):\n        \"\"\"Sets the author for the embed content.\n\n        This function returns the class parameters to allow for fluent-style\n        chaining.\n\n        Parameters\n        -----------\n        name: :class:`str`\n            The name of the author.\n        url: :class:`str`\n            The URL of the author. Only HTTP(S) is supported.\n        icon_url: :class:`str`\n            The URL of the author icon. Only HTTP(S) is supported.\n        \"\"\"\n        if name is not EmptyEmbed:\n            self._author['name'] = str(name)\n        if url is not EmptyEmbed:\n            self._author['url'] = str(url)\n        if icon_url is not EmptyEmbed:\n            self._author['icon_url'] = str(icon_url)\n        return self\n\n    def set_field(self, *, name, value, inline=True):\n        \"\"\"Sets the field for the embed content.\n\n        This function returns the class parameters to allow for fluent-style\n        chaining.\n\n        Parameters\n        -----------\n        name: :class:`str`\n            The name of the field.\n        value: :class:`str`\n            The value of the field.\n        inline: :class:`bool`\n            Whether the"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}