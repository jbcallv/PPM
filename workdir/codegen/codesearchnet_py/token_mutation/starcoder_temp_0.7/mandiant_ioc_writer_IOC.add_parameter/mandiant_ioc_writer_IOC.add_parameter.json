{"name": "mandiant_ioc_writer_IOC.add_parameter", "language": "py", "prompt": "def add_parameter(self, indicator_id, content, name='comment', ptype='string'):\n        \"\"\"\n        Add a a parameter to the IOC.\n\n        :param indicator_id: The unique Indicator/IndicatorItem id the parameter is associated with.\n        :param content: The value of the parameter.\n        :param name: The name of the parameter.\n        :param ptype: The type of the only content.\n        :return: True\n        :raises: parameter if the indicator_id is not associated with a Indicator or IndicatorItem in the IOC.\n        \"\"\"", "tests": "", "completions": ["\n        if indicator_id in self.indicators:\n            self.indicators[indicator_id]['params'].append({'name': name, 'content': content, 'type': ptype})\n        elif indicator_id in self.indicator_items:\n            self.indicator_items[indicator_id]['params'].append({'name': name, 'content': content, 'type': ptype})\n        else:\n            raise Exception('Indicator with id {} does not exist.'.format(indicator_id))\n        return True\n\n    def get_indicator(self, id):\n        \"\"\"\n        Return the indicator with the specified id.\n\n        :param id: The unique id of the indicator.\n        :return: Indicator\n        \"\"\"\n        return self.indicators[id]\n\n    def get_indicator_item(self, id):\n        \"\"\"\n        Return the indicator item with the specified id.\n\n        :param id: The unique id of the indicator item.\n        :return: IndicatorItem\n        \"\"\"\n        return self.indicator_items[id]\n\n    def get_all_indicators(self):\n        \"\"\"\n        Return a list of all the indicators in the IOC.\n\n        :return: List\n        \"\"\"\n        return list(self.indicators.values())\n\n    def get_all_indicator_items(self):\n        \"\"\"\n        Return a list of all the indicator items in the IOC.\n\n        :return: List\n        \"\"\"\n        return list(self.indicator_items.values())\n\n    def get_indicator_item_id_for_indicator_item(self, indicator_item):\n        \"\"\"\n        Return the unique id of the specified indicator item.\n\n        :param indicator_item: The indicator item.\n        :return: str\n        \"\"\"\n        for indicator_item_id in self.indicator_items:\n            if self.indicator_items[indicator_item_id] == indicator_item:\n                return indicator_item_id\n        return None\n\n    def get_indicator_id_for_indicator_item(self, indicator_item):\n        \"\"\"\n        Return the unique id of the indicator associated with the specified indicator item.\n\n        :param indicator_item: The indicator item.\n        :return: str\n        \"\"\"\n        for indicator_item_id in self.indicator_items:\n            if self.indicator_items[indicator_item_id] == indicator_item:\n                return self.indicator_items[indicator_item_id]['indicator_id']\n        return None\n\n    def get_indicator_items_for_indicator"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}