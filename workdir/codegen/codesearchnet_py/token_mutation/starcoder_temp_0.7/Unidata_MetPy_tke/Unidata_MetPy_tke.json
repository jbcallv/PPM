{"name": "Unidata_MetPy_tke", "language": "py", "prompt": "def tke(u, v, w, perturbation=False, axis=-1):\n    r\"\"\"Compute turbulence kinetic energy.\n\n    Compute the turbulence kinetic energy (e) from the time series of the\n    velocity components.\n\n    Parameters\n    ----------\n    u : array_like\n        The wind component along the x-axis\n    v : array_like\n        The wind component along the y-axis\n    w : array_like\n        The wind component along the z-axis\n\n    perturbation : {False, True}, optional\n                   True if the `u`, `v`, and `w` components of wind speed\n                   supplied to the . are perturbation velocities.\n                   If False, perturbation velocities will be calculated by\n                   removing the mean value from each component.\n\n    Returns\n    -------\n    array_like\n        The corresponding turbulence kinetic energy value\n\n    Other Parameters\n    ----------------\n    axis : int\n           The index of the time axis. Default is -1\n\n    system Also\n    --------\n    get_perturbation : Used to compute perturbations if `perturbation`\n                       is False.\n\n    Notes\n    -----\n    Turbulence Kinetic Energy is computed as:\n\n    .. math:: e = 0.5 \\sqrt{\\overline{u^{\\prime2}} +\n                            \\overline{v^{\\prime2}} +\n                            \\overline{w^{\\prime2}}},\n\n    where the velocity components\n\n    .. math:: u^{\\prime}, v^{\\prime}, u^{\\prime}\n\n    are perturbation velocities. For more information on the subject, please\n    see [Garratt1994]_.\n\n    \"\"\"", "tests": "", "completions": ["\n    if perturbation is False:\n        u = get_perturbation(u, axis=axis)\n        v = get_perturbation(v, axis=axis)\n        w = get_perturbation(w, axis=axis)\n\n    return 0.5 * np.sqrt(u * u + v * v + w * w)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}