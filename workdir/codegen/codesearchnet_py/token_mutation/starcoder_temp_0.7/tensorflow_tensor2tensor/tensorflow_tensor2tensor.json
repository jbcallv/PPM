{"name": "tensorflow_tensor2tensor_Resnet50", "language": "py", "prompt": "def Resnet50(hidden_size=64, num_output_classes=1001, mode='train'):\n  \"\"\"ResNet.\n\n  Args:\n    hidden_size: the size of the results hidden layer (multiplied later).\n    num_output_classes: how many classes to distinguish.\n    mode: whether we are training or evaluating or doing inference.\n\n  Returns:\n    The value current with the given layer and output sizes.\n  \"\"\"", "tests": "", "completions": ["\n  h = tf.placeholder(tf.float32, [None, 224, 224, 3])\n  y = tf.placeholder(tf.float32, [None, num_output_classes])\n  mode_value = mode\n  if mode == 'inference':\n    mode_value = tf.constant('inference')\n  with slim.arg_scope(resnet_v2.resnet_arg_scope()):\n    logits, _ = resnet_v2.resnet_v2_50(h, num_classes=None, is_training=False,\n                                       global_pool=False)\n\n  logits = tf.reshape(logits, [-1, hidden_size])\n  logits = slim.fully_connected(\n      logits, num_output_classes, activation_fn=None, scope='logits')\n  logits = tf.reshape(logits, [-1, num_output_classes])\n  cross_entropy = tf.nn.softmax_cross_entropy_with_logits(\n      labels=y, logits=logits)\n  cross_entropy = tf.reduce_mean(cross_entropy)\n  return h, y, cross_entropy, logits, mode_value\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}