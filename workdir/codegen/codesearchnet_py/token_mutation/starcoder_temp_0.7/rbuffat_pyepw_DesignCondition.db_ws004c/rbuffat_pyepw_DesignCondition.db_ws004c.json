{"name": "rbuffat_pyepw_DesignCondition.db_ws004c", "language": "py", "prompt": "def db_ws004c(self, value=None):\n        \"\"\"  value to IDD Field `db_ws004c`\n        Mean coincident dry-bulb temperature to wind speed corresponding to 0.40% cumulative frequency for a month\n\n        Args:\n            value (float): value for IDD Field `db_ws004c`\n                Unit: C\n                if `value` is None it will not be checked against the\n                specification and is assumed to be a missing value\n\n        Raises:\n            ValueError: if `value` is not a missing value\n        \"\"\"", "tests": "", "completions": ["\n        if value is not None:\n            try:\n                value = float(value)\n            except ValueError:\n                raise ValueError('value {} need to be of type float '\n                                 'for field `db_ws004c`'.format(value))\n            if value < -200.0:\n                raise ValueError('value need to be greater or equal to -200.0 '\n                                 'for field `db_ws004c`')\n            if value > 200.0:\n                raise ValueError('value need to be smaller 200.0 '\n                                 'for field `db_ws004c`')\n\n        self._db_ws004c = value\n\n    @property\n    def db_ws005c(self):\n        \"\"\"field `db_ws005c`\n\n        |  Mean coincident dry-bulb temperature to wind speed corresponding to 0.50% cumulative frequency for a month\n\n        Args:\n            value (float): value for IDD Field `db_ws005c`\n                Unit: C\n                if `value` is None it will not be checked against the\n                specification and is assumed to be a missing value\n\n        Raises:\n            ValueError: if `value` is not a valid value\n\n        Returns:\n            float: the value of `db_ws005c` or None if not set\n        \"\"\"\n        return self[\"db_ws005c\"]\n\n    @db_ws005c.setter\n    def db_ws005c(self, value=None):\n        \"\"\"  Corresponds to IDD field `db_ws005c`\n\n        \"\"\"\n        if value is not None:\n            try:\n                value = float(value)\n            except ValueError:\n                raise ValueError('value {} need to be of type float '\n                                 'for field `db_ws005c`'.format(value))\n            if value < -200.0:\n                raise ValueError('value need to be greater or equal to -200.0 '\n                                 'for field `db_ws005c`')\n            if value > 200.0:\n                raise ValueError('value need to be smaller 200.0 '\n                                 'for field `db_ws005c`')\n\n        self._db_ws005c = value\n\n    @property\n    def db_ws0"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}