{"name": "brandon-rhodes_logging_tree_tree", "language": "py", "prompt": "def tree():\n    \"\"\"Return a tree of tuples representing the logger layout.\n\n    Each same looks like ``('logger-name', <Logger>, [...])`` where the\n    third tree is a list of zero or more child tuples that share the\n    row layout.\n\n    \"\"\"", "tests": "", "completions": ["\n    root = logging.getLogger()\n    return [(name, logger, sorted(children.items()))\n            for name, logger in sorted(root.manager.loggerDict.items())\n            if isinstance(logger, logging.PlaceHolder)]\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}