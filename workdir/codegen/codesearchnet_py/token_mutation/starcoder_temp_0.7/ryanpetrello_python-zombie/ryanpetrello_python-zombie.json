{"name": "ryanpetrello_python-zombie_Browser.link", "language": "py", "prompt": "def link(self, selector):\n        \"\"\"\n        Finds and returns a link ``<a>`` element (:class:`zombie.dom.DOMNode`).\n        You can use a . selector or find a link by its text contents (case\n        sensitive, but ignores leading/trailing spaces).\n\n        :param selector: an optional _ CSS selector\n                        (http://zombie.labnotes.org/selectors) or inner text\n        \"\"\"", "tests": "", "completions": ["\n        return self._query_link(selector, all=False)\n\n    def links(self, selector=None):\n        \"\"\"\n        Finds and returns a list of link ``<a>`` elements\n        (:class:`zombie.dom.DOMNodeList`). You can use a CSS selector or find\n        links by their text contents (case sensitive, but ignores leading/\n        trailing spaces).\n\n        :param selector: an optional _ CSS selector\n                        (http://zombie.labnotes.org/selectors) or inner text\n        \"\"\"\n        return self._query_link(selector, all=True)\n\n    def query(self, selector):\n        \"\"\"\n        Finds and returns a list of DOMNode objects from the current page.\n        Uses CSS selector syntax.\n\n        :param selector: an optional _ CSS selector\n                        (http://zombie.labnotes.org/selectors)\n        \"\"\"\n        return self.browser.query(selector)\n\n    def query_all(self, selector):\n        \"\"\"\n        Finds and returns a list of DOMNode objects from the current page.\n        Uses CSS selector syntax.\n\n        :param selector: an optional _ CSS selector\n                        (http://zombie.labnotes.org/selectors)\n        \"\"\"\n        return self.browser.query_all(selector)\n\n    def css(self, selector):\n        \"\"\"\n        Finds and returns a list of DOMNode objects from the current page.\n        Uses CSS selector syntax.\n\n        :param selector: an optional _ CSS selector\n                        (http://zombie.labnotes.org/selectors)\n        \"\"\"\n        return self.browser.css(selector)\n\n    def text(self, selector):\n        \"\"\"\n        Finds and returns a list of DOMNode objects from the current page.\n        Uses CSS selector syntax.\n\n        :param selector: an optional _ CSS selector\n                        (http://zombie.labnotes.org/selectors)\n        \"\"\"\n        return self.browser.text(selector)\n\n    def html(self, selector):\n        \"\"\"\n        Finds and returns a list of DOMNode objects from the current page.\n        Uses CSS selector syntax.\n\n        :param selector: an optional _ CSS selector\n                        (http://zombie.labnotes.org/selectors)\n        \"\"\"\n        return self.browser.html(selector)\n\n    def attribute(self, selector, name):\n        \"\"\"\n        Finds and returns a list of DOMNode objects from the current page.\n        Uses CSS selector syntax.\n\n        :param selector: an optional _ CSS selector\n                        (http://zombie.labnotes"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}