{"name": "apache_airflow_AirflowSecurityManager.get_accessible_dag_ids", "language": "py", "prompt": "def get_accessible_dag_ids(self, username=None):\n        \"\"\"\n        Return a set of dags that user has access to(either read or write).\n\n        :param username: name of the user.\n        :return: A set of dag files that the user could access.\n        \"\"\"", "tests": "", "completions": ["<fim_suffix>           return []\n\n        return self._get_dag_ids_user_has_access_to(\n            username,\n            dag_ids=dag_ids,\n            permission_type=DagPermission.CAN_READ,\n            session=session,\n            include_children=include_children,\n        )\n\n    def _get_dag_ids_user_has_access_to(\n        self,\n        username,\n        dag_ids=None,\n        permission_type=None,\n        session=None,\n        include_children=True,\n    ):\n        \"\"\"\n        Get list of DAGs that the user has access to(either read or write).\n        \"\"\"\n        if not dag_ids:\n            dag_ids = self.get_accessible_dag_ids(username, session=session)\n\n        dag_ids_to_filter = dag_ids\n        if not include_children:\n            dag_ids_to_filter = [dag_id for dag_id in dag_ids if not dag_id.count(\".\")]\n\n        query = (\n            session.query(cls.dag_id)\n           .filter(\n                cls.dag_id.in_(dag_ids_to_filter),\n                cls.user_id == username,\n                cls.permission == permission_type,\n            )\n           .distinct()\n        )\n\n        return {dag_id[0] for dag_id in query}\n\n    def _get_dag_ids_user_can_dag_read(self, dag_ids, session=None, include_children=True):\n        \"\"\"\n        Get list of DAGs that the user can read\n        \"\"\"\n        return self._get_dag_ids_user_has_access_to(\n            username=current_user.username,\n            dag_ids=dag_ids,\n            permission_type=DagPermission.CAN_READ,\n            session=session,\n            include_children=include_children,\n        )\n\n    def _get_dag_ids_user_can_dag_edit(self, dag_ids, session=None, include_children=True):\n        \"\"\"\n        Get list of DAGs that the user can edit\n        \"\"\"\n        return self._get_dag_ids_user_has_access_to(\n            username=current_user.username,\n            dag_ids=dag_ids,\n            permission_type=DagPermission.CAN_EDIT,\n            session=session,\n            include_children=include_children,"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}