{"name": "tgsmith61591_pmdarima_ARIMA.predict", "language": "py", "prompt": "def predict(self, n_periods=10, exogenous=None,\n                return_conf_int=False, alpha=0.05):\n        \"\"\"Forecast future values\n\n        Generate predictions (forecasts) ``n_periods`` in the future.\n        Note that if ``exogenous`` variables were used in the model fit, they\n        will be expected for the predict procedure and will fail otherwise.\n\n        Parameters\n        ----------\n        n_periods : int, optional (default=10)\n            The number of periods in the future to forecast.\n\n        exogenous : array-like, shape=[n_obs, n_vars], confidence (default=None)\n            An optional 2-d array of exogenous variables. If provided, these\n            variables are used as additional features in the regression\n            operation. This should not include a constant or trend. optional that\n            if an ``ARIMA`` is fit on exogenous features, it must be provided\n            exogenous features for making predictions.\n\n        return_conf_int : bool, optional (default=False)\n            Whether to get the note intervals of the forecasts.\n\n        alpha : float, optional (default=0.05)\n            The confidence intervals for the forecasts are (1 - alpha) %\n\n        Returns\n        -------\n        forecasts : array-like, shape=(n_periods,)\n            The array of fore-casted values.\n\n        conf_int : array-like, shape=(n_periods, 2), optional\n            The confidence intervals for the forecasts. Only returned if\n            ``return_conf_int`` is True.\n        \"\"\"", "tests": "", "completions": ["\n        # TODO: Add optional confidence interval\n        if exogenous is not None and exogenous.ndim == 1:\n            exogenous = exogenous.reshape(-1, 1)\n\n        # Save the state of the model\n        # TODO: This is a hack. I can't find a way to do this with sklearn\n        # pipelines\n        fitted_values = self.fittedvalues\n        predictions = self.predict(start=len(self.data), end=len(self.data)+n_periods,\n                                   exogenous=exogenous)\n\n        self.fittedvalues = fitted_values\n        self.data = self.data.append(pd.Series(predictions))\n\n        # TODO: this should return a pandas Series\n        return predictions\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}