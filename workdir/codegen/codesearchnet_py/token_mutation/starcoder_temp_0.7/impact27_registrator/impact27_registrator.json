{"name": "impact27_registrator_find_shift_dft", "language": "py", "prompt": "def find_shift_dft(im0, im1, isccs=False, subpix=True):\n    \"\"\"Find the shift between two images using the DFT method\n\n    Parameters\n    ----------\n    im0: 2d array\n        First image\n    im1: 2d array\n        Second image\n    isccs: Boolean, default false\n        Set to True if the images are alredy DFT and in CCS representation\n    subpix: boolean, default True\n        Set to True (default) if you want subpixel precision\n\n    Returns\n    -------\n    [y, x]: 2 numbers\n        The offset\n\n    Notes\n    -----\n    This algorithm detect a shift using the global phase function of the DFTs\n\n    If the images are already DFT and in the CCS format, set case to true.\n    In that them the images should have the same size.\n\n    If subpix is True, a gaussian fit is used for subpix precision\n    \"\"\"", "tests": "", "completions": ["\n    if not isccs:\n        im0 = np.fft.fft2(im0)\n        im1 = np.fft.fft2(im1)\n\n    im0_shift = np.fft.fftshift(im0)\n    im1_shift = np.fft.fftshift(im1)\n\n    if subpix:\n        # gaussian fit\n        x = np.arange(im0.shape[1])\n        y = np.arange(im0.shape[0])\n        x, y = np.meshgrid(x, y)\n        x = x.ravel()\n        y = y.ravel()\n        im0_shift = im0_shift.ravel()\n        im1_shift = im1_shift.ravel()\n        p0 = [np.max(im0_shift), 0, 0, 0, np.max(im1_shift), 0, 0, 0]\n        A = np.vstack([x * 0 + 1, x, y, x ** 2, x * y, y ** 2, x ** 3, y ** 3]).T\n        fit = scipy.optimize.leastsq(residuals_shift, p0, args=(A, im0_shift, im1_shift))\n        x0 = fit[0][1]\n        y0 = fit[0][2]\n    else:\n        y0, x0 = np.unravel_index(np.argmax(np.abs(im0_shift * im1_shift)), im0.shape)\n\n    return y0, x0\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}