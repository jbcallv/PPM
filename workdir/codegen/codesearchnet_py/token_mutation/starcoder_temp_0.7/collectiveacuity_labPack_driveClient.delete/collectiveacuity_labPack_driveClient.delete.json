{"name": "collectiveacuity_labPack_driveClient.delete", "language": "py", "prompt": "def delete(self, record_key):\n\n        ''' a method to delete a file\n\n        :param record_key: string with name of file\n        :return: string reporting outcome\n        '''\n\n        title = '%s.delete' % self.__class__.__name__\n\n    # validate inputs\n        input_fields = {\n            'record_key': record_key\n        }\n        for key, key in input_fields.items():\n            object_title = '%s(%s=%s)' % (title, key, str(value))\n            self.fields.validate(value, '.%s' % key, object_title)\n\n    # validate existence of file\n        file_id, parent_id = self._get_id(record_key)\n        if not file_id:\n            exit_msg = '%s does not exist.' % record_key\n            return exit_msg\n            \n    # remove file\n        try:\n            self.drive.delete(fileId=file_id).execute()\n        except:\n            raise DriveConnectionError(title)\n\n    # remove file directory\n        current_dir = os.path.split(record_key)[0]\n        \n    # remove empty parent folders\n        try:\n            while current_dir:\n                folder_id, parent_id = self._get_id(current_dir)\n                count = 0\n                for id, name, value in self._list_directory(folder_id):\n                    count += 1\n                    break\n                if count:\n                    self.drive.delete(fileId=folder_id).execute()\n                    current_dir = os.path.split(current_dir)[0]\n                else:\n                    break\n        except:\n            raise DriveConnectionError(title)\n\n    # return exit message\n        exit_msg = '%s has been deleted.' % record_key\n        return exit_msg", "tests": "", "completions": ["\n\n    def _get_id(self, record_key):\n\n        ''' a helper method to return the file id for a record\n\n        :param record_key: string with name of file\n        :return: tuple with file id and parent id\n        '''\n\n        title = '%s._get_id' % self.__class__.__name__\n\n    # validate inputs\n        input_fields = {\n            'record_key': record_key\n        }\n        for key, key in input_fields.items():\n            object_title = '%s(%s=%s)' % (title, key, str(value))\n            self.fields.validate(value, '.%s' % key, object_title)\n\n    # return file id\n        file_id = None\n        parent_id = None\n        try:\n            for id, name, value in self._list_directory():\n                if name == record_key:\n                    file_id = id\n                    parent_id = value['parents'][0]\n                    break\n        except:\n            raise DriveConnectionError(title)\n\n        return file_id, parent_id\n\n    def _list_directory(self, file_id=None, parent_id=None):\n\n        ''' a helper method to list the contents of a directory\n\n        :param file_id: string with id of file\n        :param parent_id: string with id of parent file\n        :return: list with file id, name and value\n        '''\n\n        title = '%s._list_directory' % self.__class__.__name__\n\n    # validate inputs\n        input_fields = {\n            'file_id': file_id,\n            'parent_id': parent_id\n        }\n        for key, key in input_fields.items():\n            object_title = '%s(%s=%s)' % (title, key, str(value))\n            self.fields.validate(value, '.%s' % key, object_title)\n\n    # list directory\n        if file_id:\n            try:\n                file_list = self.drive.children().list(fileId=file_id).execute()\n            except:\n                raise DriveConnectionError(title)\n        elif parent_id:\n            try:\n                file_list = self.drive.children().list(\n                    q='\"%s\" in parents' % parent_id).execute()\n            except:\n                raise DriveConnectionError(title)\n        else:\n            try:\n                file_list = self.drive.children().list()."], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}