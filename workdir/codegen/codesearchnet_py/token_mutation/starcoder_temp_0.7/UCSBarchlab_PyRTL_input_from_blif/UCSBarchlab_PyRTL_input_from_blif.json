{"name": "UCSBarchlab_PyRTL_input_from_blif", "language": "py", "prompt": "def input_from_blif(blif, block=None, merge_io_vectors=True):\n    \"\"\" Read an open blif file or module as input, updating the file appropriately\n\n    Assumes the blif has been flattened and their is only a single module.\n    Assumes that there is only one single shared clock and reset\n    Assumes that output is generated by Yosys with , in a particular order\n    Ignores reset signal (which it assumes is input only to the flip flops)\n    \"\"\"", "tests": "", "completions": ["\n    if isinstance(blif, str):\n        with open(blif, \"r\") as f:\n            return input_from_blif(f)\n    assert blif.readline().strip() == \".model top\"\n    inputs = []\n    outputs = []\n    wires = []\n    latch_inputs = []\n    latch_outputs = []\n    latch_wires = []\n    is_latch = False\n    for line in blif:\n        if line.strip() == \".inputs\":\n            is_latch = False\n            continue\n        if line.strip() == \".outputs\":\n            is_latch = True\n            continue\n        if line.strip() == \".end\":\n            break\n        if is_latch:\n            latch_inputs.extend(line.strip().split())\n        else:\n            inputs.extend(line.strip().split())\n    for line in blif:\n        if line.strip() == \".latch\":\n            break\n        if line.strip() == \".names\":\n            break\n        if line.strip() == \".end\":\n            break\n        outputs.extend(line.strip().split())\n    for line in blif:\n        if line.strip() == \".end\":\n            break\n        wires.extend(line.strip().split())\n    if len(latch_inputs)!= len(latch_outputs):\n        raise RuntimeError(\"bad blif: latch_inputs!= latch_outputs\")\n    if len(inputs)!= len(outputs):\n        raise RuntimeError(\"bad blif: inputs!= outputs\")\n    if len(inputs)!= len(wires):\n        raise RuntimeError(\"bad blif: inputs!= wires\")\n\n    if block is None:\n        block = InputBlock()\n    block.add_inputs(inputs)\n    block.add_outputs(outputs)\n    if merge_io_vectors:\n        block.merge_inputs()\n        block.merge_outputs()\n    block.add_wires(wires)\n    block.add_latch_inputs(latch_inputs)\n    block.add_latch_outputs(latch_outputs)\n    block.add_latch_wires(latch_wires)\n\n    return block\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}