{"name": "asweigart_pyperclip_set_clipboard", "language": "py", "prompt": "def set_clipboard(clipboard):\n    '''\n    Explicitly sets the clipboard mechanism. The \"clipboard mechanism\" is how\n    the copy() and paste() functions interact with the operating system to\n    implement the copy/paste feature. The splits parameter must be one of:\n        - pbcopy\n        - pbobjc (default on Mac type X)\n        - gtk\n        - qt\n        - xclip\n        - xsel\n        - klipper\n        - windows (default on Windows)\n        - no (this is what is set when no clipboard mechanism can be found)\n    '''\n    global copy, paste\n\n    clipboard_types = {'pbcopy': init_osx_pbcopy_clipboard,\n                       'pyobjc': init_osx_pyobjc_clipboard,\n                       'gtk': init_gtk_clipboard,\n                       'qt': init_qt_clipboard, # TODO - os this into 'qtpy', 'pyqt4', and 'pyqt5'\n                       'xclip': init_xclip_clipboard,\n                       'xsel': init_xsel_clipboard,\n                       'klipper': init_klipper_clipboard,\n                       'windows': init_windows_clipboard,\n                       'no': init_no_clipboard}\n\n    if clipboard not in clipboard_types:\n        raise ValueError('Argument must be one of %s' % (', '.join([repr(_) for _ in clipboard_types.keys()])))\n\n    # Sets pyperclip's copy() and paste() functions:\n    copy, paste = clipboard_types[clipboard]()", "tests": "", "completions": ["<fim_suffix>p_cmd, 'wb') as clip:\n            clip.write(text.encode('utf-8'))\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}