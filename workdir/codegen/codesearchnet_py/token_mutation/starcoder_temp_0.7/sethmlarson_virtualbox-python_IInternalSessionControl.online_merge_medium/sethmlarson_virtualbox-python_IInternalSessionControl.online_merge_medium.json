{"name": "sethmlarson_virtualbox-python_IInternalSessionControl.online_merge_medium", "language": "py", "prompt": "def online_merge_medium(self, medium_attachment, source_idx, target_idx, progress):\n        \"\"\"Triggers online merging of a hard disk. Used internally when deleting\n        a snapshot while a VM referring to the same hard disk chain is running.\n\n        in medium_attachment of type :class:`IMediumAttachment`\n            The medium attachment to identify the medium chain.\n\n        in source_idx of type int\n            The index of the source image in the chain.\n            Redundant, but drastically reduces IPC.\n\n        in target_idx of type int\n            The index of the target image in the chain.\n            Redundant, but drastically reduces IPC.\n\n        in access of type :class:`IProgress`\n            Progress object for this operation.\n\n        raises :class:`VBoxErrorInvalidVmState`\n            Machine session is not open.\n        \n        raises :class:`VBoxErrorInvalidObjectState`\n            Session ##vocation is not direct.\n        \n        \"\"\"", "tests": "", "completions": ["\n        return self._o.online_merge_medium(medium_attachment, source_idx, target_idx, progress)\n\n    def get_medium(self, name_or_id, access_mode, device_type):\n        \"\"\"Returns the medium with the given name or UUID.\n\n        in name_or_id of type unicode\n            The name or UUID of the medium.\n\n        in access_mode of type :class:`AccessMode`\n            The access mode for the medium.\n\n        in device_type of type :class:`DeviceType`\n            The device type of the medium.\n\n        returns :class:`IMedium`\n            Medium object.\n\n        raises :class:`VBoxErrorObjectNotFound`\n            No medium with the given name or UUID.\n\n        \"\"\"\n        return self._o.get_medium(name_or_id, access_mode, device_type)\n\n    def get_medium_by_id(self, medium_id):\n        \"\"\"Returns the medium with the given UUID.\n\n        in medium_id of type unicode\n            The UUID of the medium.\n\n        returns :class:`IMedium`\n            Medium object.\n\n        raises :class:`VBoxErrorObjectNotFound`\n            No medium with the given UUID.\n\n        \"\"\"\n        return self._o.get_medium_by_id(medium_id)\n\n    def get_mediums_by_id(self, medium_ids):\n        \"\"\"Returns the mediums with the given UUIDs.\n\n        in medium_ids of type [unicode]\n            The UUIDs of the mediums.\n\n        returns [:class:`IMedium`]\n            Medium objects.\n\n        raises :class:`VBoxErrorObjectNotFound`\n            No medium with the given UUID.\n\n        \"\"\"\n        return self._o.get_mediums_by_id(medium_ids)\n\n    def get_mediums(self, access_mode, device_type):\n        \"\"\"Returns all media matching the given type.\n\n        in access_mode of type :class:`AccessMode`\n            The access mode for the medium.\n\n        in device_type of type :class:`DeviceType`\n            The device type of the medium.\n\n        returns [:class:`IMedium`]\n            Medium objects.\n\n        \"\"\"\n        return self._o.get_mediums(access_mode, device_type)\n\n    def get_dvds(self):\n        \"\"\"Returns all DVD images.\n\n        returns [:class:`IMedium`]\n            Medium objects.\n\n        \"\"\"\n        return self._"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}