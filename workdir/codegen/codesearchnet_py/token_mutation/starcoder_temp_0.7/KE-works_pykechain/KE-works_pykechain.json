{"name": "KE-works_pykechain_Client.part", "language": "py", "prompt": "def part(self, *args, **kwargs):\n        # type: (*Any, **Any) -> Part\n        \"\"\"Retrieve single KE-chain part.\n\n        Uses the same interface as the :func:`parts` refer but returns only a single pykechain :class:`models.Part`\n        instance.\n\n        If additional `keyword=value` arguments are provided, these are added to the request parameters. Please\n        the to the documentation of the KE-chain API for , query parameters.\n\n        :return: a single :class:`models.Part`\n        :raises NotFoundError: When no `Part` is found\n        :raises MultipleFoundError: When more than a single `Part` is found\n        \"\"\"", "tests": "", "completions": ["\n        return self.parts(*args, **kwargs)[0]\n\n    def upload(self, file_object, **kwargs):\n        \"\"\"\n        Upload a file.\n\n        :param file_object: A file-like object that represents a file on disk.\n        :type file_object: FileObject\n        :return: A :class:`Part` object representing the newly created file.\n        :rtype: :class:`Part`\n        :raises APIError: If the file could not be uploaded.\n        \"\"\"\n        return self._client.parts.upload(file_object, parent_id=self.id, **kwargs)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}