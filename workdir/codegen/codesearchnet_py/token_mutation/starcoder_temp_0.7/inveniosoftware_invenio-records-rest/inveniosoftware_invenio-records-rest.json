{"name": "inveniosoftware_invenio-records-rest_MarshmallowMixin.transform_record", "language": "py", "prompt": "def transform_record(self, pid, record, links_factory=None, **kwargs):\n        \"\"\"Transform abstract into an it representation.\"\"\"", "tests": "", "completions": ["\n        record = dict(record)\n        links = links_factory(pid, record, **kwargs) if links_factory else {}\n        return {\n            \"pid\": pid,\n            \"title\": record.get(\"title\"),\n            \"authors\": record.get(\"authors\", []),\n            \"abstract\": record.get(\"abstract\"),\n            \"description\": record.get(\"description\"),\n            \"links\": links,\n        }\n\n    def get_pid_by_object_type(self, object_type):\n        \"\"\"Return pid by object type.\"\"\"\n        return f\"{object_type.lower()}-1\"\n\n    def get_pid_by_object_type_and_field(self, object_type, field):\n        \"\"\"Return pid by object type and field.\"\"\"\n        return f\"{object_type.lower()}-{field.lower()}\"\n\n    def get_object_type_by_pid(self, pid):\n        \"\"\"Return object type by pid.\"\"\"\n        return pid.split(\"-\")[0].capitalize()\n\n    def get_field_by_pid(self, pid):\n        \"\"\"Return field by pid.\"\"\"\n        return pid.split(\"-\")[-1].capitalize()\n\n    def get_pid_by_record(self, record):\n        \"\"\"Return pid by record.\"\"\"\n        return record.get(\"pid\")\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}