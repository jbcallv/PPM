{"name": "opencobra_cobrapy_Model.get_associated_groups", "language": "py", "prompt": "def get_associated_groups(self, element):\n        \"\"\"Returns a list of groups that an element (reaction, metabolite, gene)\n        is associated with.\n\n        Parameters\n        ----------\n        element: `cobra.Reaction`, `cobra.Metabolite`, or `cobra.Gene`\n\n        Returns\n        -------\n        list of `cobra.Group`\n            All groups that the object object is a member of\n        \"\"\"", "tests": "", "completions": ["\n        return list(set(element.groups.values()))\n\n    def get_associated_group_members(self, group):\n        \"\"\"Returns a list of elements that are members of a group.\n\n        Parameters\n        ----------\n        group: `cobra.Group`\n            The group to get members of\n\n        Returns\n        -------\n        list of `cobra.Reaction`, `cobra.Metabolite`, or `cobra.Gene`\n            All objects that are members of the group\n        \"\"\"\n        members = []\n        for member in group.members:\n            members.append(member)\n        return members\n\n    def get_associated_group_names(self, element):\n        \"\"\"Returns a list of names of groups that an element (reaction, metabolite, gene)\n        is associated with.\n\n        Parameters\n        ----------\n        element: `cobra.Reaction`, `cobra.Metabolite`, or `cobra.Gene`\n\n        Returns\n        -------\n        list of `cobra.Group`\n            All groups that the object object is a member of\n        \"\"\"\n        return [group.id for group in self.get_associated_groups(element)]\n\n    def get_associated_group_names_of_metabolite(self, metabolite):\n        \"\"\"Returns a list of names of groups that a metabolite is associated with.\n\n        Parameters\n        ----------\n        metabolite: `cobra.Metabolite`\n            The metabolite to get group names of\n\n        Returns\n        -------\n        list of `cobra.Group`\n            All groups that the metabolite is a member of\n        \"\"\"\n        return [group.id for group in self.get_associated_groups(metabolite)]\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}