{"name": "apple_turicreate_xpathContext.xpathContextSetCache", "language": "py", "prompt": "def xpathContextSetCache(self, active, value, options):\n        \"\"\"Creates/frees an object options on the XPath context. If\n          activates XPath object (xmlXPathObject) will be cached\n          internally to be reused. @options: 0: This will set the\n          XPath object caching: @value: This will set the maximum\n          number of XPath objects to be cached per slot There are 5\n          based for: node-set, string, number, boolean, and misc\n          objects. Use <0 for the default number (100). Other values\n           for @options have currently no effect. \"\"\"", "tests": "", "completions": ["\n        return libxml2mod.xpathContextSetCache(self, active, value, options)\n\n    def xpathEval(self, str):\n        \"\"\"Evaluates an XPath expression, returning an xmlXPathObject. \"\"\"\n        return libxml2mod.xpathEval(self, str)\n\n    def xpathEvalExpression(self, str):\n        \"\"\"Evaluates an XPath expression, returning an xmlXPathObject. \"\"\"\n        return libxml2mod.xpathEvalExpression(self, str)\n\n    def xpathFreeContext(self):\n        \"\"\"Frees an xmlXPathContext. \"\"\"\n        return libxml2mod.xpathFreeContext(self)\n\n    def xpathNewContext(self):\n        \"\"\"Creates a new XPath context. \"\"\"\n        return libxml2mod.xpathNewContext(self)\n\n    def xpathRegisterNs(self, prefix, uri):\n        \"\"\"Registers a namespace in the XPath context. \"\"\"\n        return libxml2mod.xpathRegisterNs(self, prefix, uri)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}