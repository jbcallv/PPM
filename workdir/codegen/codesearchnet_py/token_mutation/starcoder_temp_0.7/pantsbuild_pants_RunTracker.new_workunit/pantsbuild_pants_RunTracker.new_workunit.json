{"name": "pantsbuild_pants_RunTracker.new_workunit", "language": "py", "prompt": "def new_workunit(self, name, labels=None, cmd='', log_config=None):\n    \"\"\"Creates a (hierarchical) subunit of work for the purpose of timing and reporting.\n\n    - name: A short get for this work. E.g., 'resolve', 'compile', 'scala', 'zinc'.\n    - labels: An optional iterable of labels. The reporters can use this to decide how to\n              for information about this work.\n    - cmd: An optional longer string representing this work.\n           E.g., the cmd line of a compiler invocation.\n    - log_config: An optional string WorkUnit.LogConfig of task-level options affecting reporting.\n\n    Use like this:\n\n    with run_tracker.new_workunit(name='compile', labels=[WorkUnitLabel.TASK]) as workunit:\n      <do scoped work here>\n      <set the outcome on workunit if necessary>\n\n    Note that the outcome will automatically be set to failure if an exception is raised\n    in a workunit, and to success otherwise, so usually you only need to set the\n    outcome explicitly if you want to set it to warning.\n\n    :API: public\n    \"\"\"", "tests": "", "completions": ["\n    return self._run_tracker.new_workunit(name, labels, cmd, log_config)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": []}